/*
https://www.luogu.com.cn/problem/P1546
题目背景
Farmer John 被选为他们镇的镇长！他其中一个竞选承诺就是在镇上建立起互联网，并连接到所有的农场。当然，他需要你的帮助。

题目描述
FJ 已经给他的农场安排了一条高速的网络线路，他想把这条线路共享给其他农场。为了用最小的消费，他想铺设最短的光纤去连接所有的农场。

你将得到一份各农场之间连接费用的列表，你必须找出能连接所有农场并所用光纤最短的方案。每两个农场间的距离不会超过 10^5

输入格式
第一行农场的个数 N（3≤N≤100）。

接下来是一个 N×N 的矩阵，表示每个农场之间的距离。理论上，他们是 N 行，每行由 N 个用空格分隔的数组成，实际上，由于每行 80 个字符的限制，因此，某些行会紧接着另一些行。当然，对角线将会是 0，因为不会有线路从第 i 个农场到它本身。

输出格式
只有一个输出，其中包含连接到每个农场的光纤的最小长度。
*/

#include <iostream>
#include <cstdio>
#include <algorithm>
#define re register
#define MAXN 105

using namespace std;

inline int read(){
	int x = 0, f = 1;
	char ch = getchar();
	while(ch<'0'||ch>'9'){
		if(ch=='-')
			f = -1;
		ch = getchar();
	}
	while(ch>='0'&&ch<='9'){
		x=(x<<1)+(x<<3)+(ch^48);
		ch = getchar();
	}
	return x*f;
}

struct Edge{
    int u, v, w;
}G[MAXN*MAXN];

int N, tot, parent[MAXN];

void init(){
    for(re int i = 1 ; i <= N ; ++i)
        parent[i] = i;
}

int Find(int x){
    if(parent[x]!=x)
        parent[x] = Find(parent[x]);
    return parent[x];
}

bool cmp(Edge a, Edge b){
    return a.w < b.w;
}

int kruskal(){
    sort(G+1,G+N*(N-1)+1,cmp);
    int cnt = 0, ans = 0;
    for(re int i = 1 ; i <= N*(N-1) ; ++i){
        int pu = Find(G[i].u), pv = Find(G[i].v);
        if(pu==pv) continue;
        parent[pu] = pv;
        ans += G[i].w;
        if(++cnt==N-1) break;
    }
    return ans;
}

int main(){
    N = read();
    init();
    int tmp;
    for(re int i = 1 ; i <= N ; ++i){
        for(re int j = 1 ; j <= N ; ++j){
            if(tmp=read()){
                G[++tot].u = i;
                G[tot].v = j;
                G[tot].w = tmp;
            }
        }
    }
    printf("%d\n",kruskal());
    return 0;
}

/*
https://www.luogu.com.cn/problem/P2820
题目背景
某个局域网内有n(n<=100)台计算机，由于搭建局域网时工作人员的疏忽，现在局域网内的连接形成了回路，我们知道如果局域网形成回路那么数据将不停的在回路内传输，造成网络卡的现象。因为连接计算机的网线本身不同，所以有一些连线不是很畅通，我们用f(i,j)表示i,j之间连接的畅通程度，f(i,j)值越小表示i,j之间连接越通畅，f(i,j)为0表示i,j之间无网线连接。

题目描述
需要解决回路问题，我们将除去一些连线，使得网络中没有回路，并且被除去网线的Σf(i,j)最大，请求出这个最大值。

输入格式
第一行两个正整数n k

接下来的k行每行三个正整数i j m表示i,j两台计算机之间有网线联通，通畅程度为m。

输出格式
一个正整数，Σf(i,j)的最大值
*/

/*
 * 看成建最小生成树,用总和减去代价
 */
 
#include <iostream>
#include <cstdio>
#include <string.h>
#include <algorithm>
#define re register
#define MAXN 105

using namespace std;

inline int read(){
	int x = 0, f = 1;
	char ch = getchar();
	while(ch<'0'||ch>'9'){
		if(ch=='-')
			f = -1;
		ch = getchar();
	}
	while(ch>='0'&&ch<='9'){
		x=(x<<1)+(x<<3)+(ch^48);
		ch = getchar();
	}
	return x*f;
}

struct Edge{
    int u, v, w;
}G[MAXN*MAXN];

int n, k, sum, parent[MAXN];

bool cmp(Edge a, Edge b){
    return a.w < b.w;
}

inline int Find(int x){
    if(parent[x]!=x)
        parent[x] = Find(parent[x]);
    return parent[x];
}

int kruskal(){
    for(re int i = 1 ; i <= n ; ++i)
        parent[i] = i;
    sort(G+1,G+k+1,cmp);
    int cnt = 0, res = 0;
    for(re int i = 1 ; i <= k ; ++i){
        int pu = Find(G[i].u), pv = Find(G[i].v);
        if(pu==pv) continue;
        parent[pu] = pv;
        res += G[i].w;
        if(++cnt==n) return res;
    }
    return res;
}

int main(){
    n = read();
    k = read();
    for(re int i =  1 ; i <= k ; ++i){
        G[i].u = read();
        G[i].v = read();
        G[i].w = read();
        sum += G[i].w;
    }
    printf("%d\n",sum-kruskal());
    return 0;
}
