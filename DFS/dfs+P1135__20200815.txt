/*
https://www.luogu.com.cn/problem/P1135
呵呵，有一天我做了一个梦，梦见了一种很奇怪的电梯。大楼的每一层楼都可以停电梯，而且第i层楼(1≤i≤N)上有一个数字Ki(0≤K≤N)。电梯只有四个按钮：开，关，上，下。上下的层数等于当前楼层上的那个数字。当然，如果不能满足要求，相应的按钮就会失灵。例如：3,3,1,2,5代表了Ki(Ki=3,K2=3)，从1楼开始。在1楼，按“上”可以到4楼，按“下”是不起作用的，因为没有-2楼。那么，从A楼到B楼至少要按几次按钮呢？

输入格式
共二行。

第一行为3个用空格隔开的正整数，表示N,A,B(1≤N≤200, 1≤A,B≤N)

第二行为N个用空格隔开的非负整数，表示Ki

输出格式
一行，即最少按键次数,若无法到达，则输出-1
*/

/*
 * 从A楼开始DFS，没有越界就继续DFS，直到B楼
 */
 
package P1135;

import java.io.*;

public class Main {

	static int N, A, B, data[], ans;
	static boolean vis[];
	
	public static void main(String[] args) throws IOException {
		StreamTokenizer st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
		st.nextToken(); N = (int)st.nval;
		st.nextToken(); A = (int)st.nval;
		st.nextToken(); B = (int)st.nval;
		init();
		for(int i = 1 ; i <= N ; ++i) {
			st.nextToken(); data[i] = (int)st.nval;
		}
		vis[A] = true;
		DFS(A,0);
		vis[A] = false;
		if(ans!=0x7fffffff)
			System.out.println(ans);
		else
			System.out.println(-1);
	}
	
	public static void DFS(int floor, int step) {
		if(step>=ans) return ;
		if(floor==B) {
			ans = Math.min(ans,step);
			return ;
		}
		//up
		int aft = floor+data[floor];
		if(aft<=N&&aft>=1&&!vis[aft]) {
			vis[aft] = true;
			DFS(aft,step+1);
			vis[aft] = false;
		}
		//down
		aft = floor-data[floor];
		if(aft<=N&&aft>=1&&!vis[aft]) {
			vis[aft] = true;
			DFS(aft,step+1);
			vis[aft] = false;
		}
	}
	
	public static void init() {
		data = new int[N+1];
		vis = new boolean[N+1];
		ans = 0x7fffffff;
	}

}
