/*
题目背景
高手最近谈恋爱了。不过是单相思。“即使是单相思，也是完整的爱情”，高手从未放弃对它的追求。今天，这个阳光明媚的早晨，太阳从西边缓缓升起。于是它找到高手，希望在晨读开始之前和高手一起在鳌头山上一起散步。高手当然不会放弃这次梦寐以求的机会，他已经准备好了一切。

题目描述
鳌头山上有n个观景点，观景点两两之间有游步道共m条。高手的那个它，不喜欢太刺激的过程，因此那些没有路的观景点高手是不会选择去的。另外，她也不喜欢去同一个观景点一次以上。而高手想让他们在一起的路程最长（观景时它不会理高手），已知高手的穿梭机可以让他们在任意一个观景点出发，也在任意一个观景点结束。

输入格式
第一行，两个用空格隔开的整数n、m. 之后m行，为每条游步道的信息：两端观景点编号、长度。

输出格式
一个整数，表示他们最长相伴的路程。
*/

/*
 * 路的长度可以用二维数组存储,图则用ArrayList[]
 * 可以从每一个点出发,对1~n用DFS
 */
 
//package P1294;

import java.util.*;
import java.io.*;

public class Main {

	static ArrayList<Integer> road[];
	static int value[][], ans = -1;
	static boolean[] vis;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String[] in = br.readLine().split(" ");
		
		int n = Integer.parseInt(in[0]) ,m = Integer.parseInt(in[1]), x, y, z;
		road = new ArrayList[n+1];
		value = new int[n+1][n+1];
		vis = new boolean[n+1];
		
		for(int i = 1 ; i <= n ; i++) {
			road[i] = new ArrayList<Integer>();
		}
		for(int i = 1 ; i <= m ; i++) {
			in = br.readLine().split(" ");
			x = Integer.parseInt(in[0]); y = Integer.parseInt(in[1]) ; z = Integer.parseInt(in[2]);
			road[x].add(y);
			road[y].add(x);
			value[x][y]=value[y][x]=z;
		}
		//input ended
		
		for(int i = 1 ; i <= n ; i++) {
			vis[i] = true;
			DFS(i,0);
			vis[i] = false;
		}
		
		System.out.println(ans);
	}
	
	public static void DFS(int s, int tmp) {
		ans = Math.max(ans,tmp);
		for(int i = 0 ; i < road[s].size() ; i++) {
			int aft = road[s].get(i);
			if(!vis[aft]) {
				vis[aft] = true;
				DFS(aft,tmp+value[s][aft]);
				vis[road[s].get(i)]=false;
			}
		}
		
	}

}
