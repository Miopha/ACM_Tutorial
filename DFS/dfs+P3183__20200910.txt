/*
https://www.luogu.com.cn/problem/solution/P3183
题目描述
如图所示为某生态系统的食物网示意图，据图回答第1小题现在给你n个物种和m条能量流动关系，求其中的食物链条数。物种的名称为从1到n编号M条能量流动关系形如a1 b1a2 b2a3 b3......am-1 bm-1am bm其中ai bi表示能量从物种ai流向物种bi,注意单独的一种孤立生物不算一条食物链

输入格式
第一行两个整数n和m,接下来m行每行两个整数ai bi描述m条能量流动关系。（数据保证输入数据符号生物学特点，且不会有重复的能量流动关系出现）1<=N<=100000 0<=m<=200000题目保证答案不会爆 int

输出格式
一个整数即食物网中的食物链条数

输入输出样例
输入 #1
10 16
1 2
1 4
1 10
2 3
2 5
4 3
4 5
4 8
6 5
7 6
7 9
8 5
9 8
10 6
10 7
10 9
输出 #1
9
*/

/*
 * DFS+记忆化搜索
 */
 
#include <iostream>
#include <cstdio>
#define MAXN 400005
#define MAXM 800005
#define re register

using namespace std;

inline int read(){
	int x = 0 , f = 1;
	char ch = getchar();
	while(ch<'0'||ch>'9'){
		if(ch=='-')
			f = -1;
		ch = getchar();
	}
	while(ch>='0'&&ch<='9'){
		x=(x<<1)+(x<<3)+(ch^48);
		ch = getchar();
	}
	return x*f;
}

int n, m, memory[MAXN], head[MAXN], tot;
bool in[MAXN], out[MAXN];

struct Edge{
    int u, v, next;
}G[MAXN];

inline void addEdge(int u, int v){
    G[++tot].u = u;
    G[tot].v = v;
    G[tot].next = head[u];
    head[u] = tot;
}

inline int DFS(int u){
    if(memory[u]) return memory[u];
    if(!out[u]&&in[u]) return 1;
    int ans = 0;
    for(re int i = head[u] ; i ; i = G[i].next){
        int v = G[i].v;
        ans += DFS(v);
    }
    return memory[u] = ans;
}

int main(){
    n = read();
    m = read();
    int u, v;
    for(re int i = 1 ; i <= m ; ++i){
        u = read();
        v = read();
        addEdge(u,v);
        in[v] = true;
        out[u] = true;
    }
    int ans = 0;
    for(re int i = 1 ; i <= n ; ++i){
        if(!in[i])
            ans += DFS(i);
    }
    printf("%d\n",ans);
    return 0;
}
