/*
https://www.luogu.com.cn/problem/P2853
题目描述
The cows are having a picnic! Each of Farmer John's K (1 ≤ K ≤ 100) cows is grazing in one of N (1 ≤ N ≤ 1,000) pastures, conveniently numbered 1...N. The pastures are connected by M (1 ≤ M ≤ 10,000) one-way paths (no path connects a pasture to itself).

The cows want to gather in the same pasture for their picnic, but (because of the one-way paths) some cows may only be able to get to some pastures. Help the cows out by figuring out how many pastures are reachable by all cows, and hence are possible picnic locations.

K(1≤K≤100)只奶牛分散在N(1≤N≤1000)个牧场．现在她们要集中起来进餐．牧场之间有M(1≤M≤10000)条有向路连接，而且不存在起点和终点相同的有向路．她们进餐的地点必须是所有奶牛都可到达的地方．那么，有多少这样的牧场呢？

输入格式
Line 1: Three space-separated integers, respectively: K, N, and M

Lines 2..K+1: Line i+1 contains a single integer (1..N) which is the number of the pasture in which cow i is grazing.

Lines K+2..M+K+1: Each line contains two space-separated integers, respectively A and B (both 1..N and A != B), representing a one-way path from pasture A to pasture B.

输出格式
Line 1: The single integer that is the number of pastures that are reachable by all cows via the one-way paths.
*/

//package P2853;

import java.io.*;
import java.util.*;

public class Main {

	static int K, N, M, cows[], vis[], ans;
	static boolean went[];
	static ArrayList<Integer> node[];
	
	public static void main(String[] args) throws Exception {
		K = nextInt();
		N = nextInt();
		M = nextInt();
		init();
		for(int i = 1 ; i <= K ; ++i)
			cows[i] = nextInt();
		int u, v;
		for(int i = 1 ; i <= M ; ++i) {
			u = nextInt();
			v = nextInt();
			node[u].add(v);
		}
		for(int i = 1 ; i <= K ; ++i) {
			Arrays.fill(went,false);
			DFS(cows[i]);
		}
		for(int i = 1 ; i <= N ; ++i) {
			if(vis[i]==K) ++ans;
		}
		out.println(ans);
		out.flush();
	}
	
	public static void DFS(int x) {
		++vis[x];
		went[x] = true;
		for(int i =  0 ; i < node[x].size() ; ++i) {
			if(!went[node[x].get(i)])
				DFS(node[x].get(i));
		}
	}
	
	public static void init() {
		cows = new int[K+1];
		vis = new int[N+1];
		went = new boolean[N+1];
		node = new ArrayList[N+1];
		for(int i = 1 ; i <= N ; ++i)
			node[i] = new ArrayList<Integer>();
	}

	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StreamTokenizer st = new StreamTokenizer(br);
	static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
	public static int nextInt() throws Exception {
		st.nextToken();
		return (int)st.nval;
	}
}
