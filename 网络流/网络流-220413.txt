/*
https://www.luogu.com.cn/problem/P3254
*/
#include <cstdio>
#include <algorithm>
#include <queue>
#include <iostream>
#define CHECK(x) cout << (#x) << " is " << (x) << endl;

using namespace std;
typedef long long ll;
const int MAXN = 200005, MAXM = 500005;
const ll INFL = 0x3f3f3f3f3f3f3f3f;

int head[MAXN], tot = 1;

struct Edge{
	int u, to, next;
	ll flow;
}G[MAXM];

inline void addEdge(int u, int v, ll w){
	G[++tot].u = u;
	G[tot].to = v;
	G[tot].flow = w;
	G[tot].next = head[u];
	head[u] = tot;
}

inline void addFlow(int u, int v, ll f = INFL){
	addEdge(u,v,f);
	addEdge(v,u,0);
}

int n, m, s, t, dis[MAXN], now[MAXN];
ll mxFlow, sum;

bool BFS(int s, int t){
	for(int i = s ; i <= t ; ++i) dis[i] = 0;
	queue<int> q;
	q.push(s);
	dis[s] = 1;
	now[s] = head[s];
	while(!q.empty()){
		int np = q.front(); q.pop();
		for(int i = head[np], to ; i ; i = G[i].next){
			to = G[i].to;
			if(dis[to]||!G[i].flow) continue;
			now[to] = head[to];
			dis[to] = dis[np] + 1;
			q.push(to);
		}
	}
	return dis[t];
}

// flow, 进过该点的剩余流量
// res, 能经过该点的剩余流量和
// k, 当前路径能进过的流量
// now, 弧优化
inline ll DFS(int np, ll flow){
	if(np==t) return flow;
	ll res = 0;
	for(int i = now[np], to ; i ; i = G[i].next){
		now[np] = i;
		to = G[i].to;
		if(!G[i].flow||dis[to]^(dis[np]+1)) continue;
		
		ll k = DFS(to,min(flow,G[i].flow));
		if(k==0) dis[to] = 0;
		G[i].flow -= k;
		G[i ^ 1].flow += k;
		res += k;
		flow -= k;
		if(!flow) break;
	}
	return res;
}

int main(){
	scanf("%d %d",&n,&m);
	t = n + m + 1;
	for(int i = 1, r ; i <= n ; ++i){
		scanf("%d",&r);
		addFlow(s,i,r);
		sum += r;
	}
	for(int i = 1, c ; i <= m ; ++i){
		scanf("%d",&c);
		addFlow(i+n,t,c);
	}
	for(int i = 1 ; i <= n ; ++i){
		for(int j = 1 ; j <= m ; ++j)
			addFlow(i,n+j,1);
	}
    while(BFS(s,t)){
        mxFlow += DFS(s,1e18);
    }
    if(mxFlow==sum){
    	puts("1");
    	for(int i = 1 ; i <= n ; ++i){
    		for(int j = head[i] ; j ; j = G[j].next){
    			if(!G[j].flow&&G[j].to>=n) printf("%d ",G[j].to-n);
    		}
    		putchar('\n');
    	}
    }else puts("0");
	return 0;
}

/*
https://www.luogu.com.cn/problem/P3358
*/

#include <cstdio>
#include <algorithm>
#include <queue>

using namespace std;
typedef long long ll;
typedef pair<int,int> p;
const ll INFL = 0x3f3f3f3f3f3f3f3f;
const int MAXN = 5005, MAXM = 50005;

int head[MAXN], tot = 1;

struct Edge{
	int u, to, cost, next;
	ll flow;
}G[MAXM<<1];

inline void addEdge(int u, int v, int c, int f){
	G[++tot].u = u;
	G[tot].to = v;
	G[tot].cost = c;
	G[tot].flow = f;
	G[tot].next = head[u];
	head[u] = tot;
}

inline void addFlow(int u, int v, int c, ll f = INFL){
	addEdge(u,v,c,f);
	addEdge(v,u,-c,0);
}

p xy[MAXN];
int n, k, s, t, last[MAXM<<1], pre[MAXN], s1;
deque<int> dq;
bool inq[MAXN];
ll dis[MAXN], flow[MAXN], mxFlow, mnCost;

bool SPFA(int s, int t){
	for(int i = 0 ; i <= (n+1)<<1 ; ++i) dis[i] = flow[i] = INFL;
	dis[s] = 0;
	dq.push_front(s);
	inq[s] = true;
	while(!dq.empty()){
		int np = dq.front(); dq.pop_front();
		inq[np] = false;
		for(int i = head[np], to ; i ; i = G[i].next){
			to = G[i].to;
			if(G[i].flow>0&&(dis[to]>dis[np]+G[i].cost)){
				dis[to] = dis[np]+G[i].cost;
				flow[to] = min(flow[np],G[i].flow);
				last[to] = i;
				pre[to] = np;
				if(!inq[to]){
					inq[to] = true;
					if(dq.empty()||dis[to]<=dis[dq.front()]) dq.push_front(to);
					else dq.push_back(to);
				}
			}
		}
	}
	return (dis[t] ^ INFL);
}

void MCMF(int s, int t){
	while(SPFA(s,t)){
		mxFlow += flow[t];
		mnCost += flow[t] * dis[t];
		int np = t;
		while(np^s){
			G[last[np]].flow -= flow[t];
			G[last[np]^1].flow += flow[t];
			np = pre[np];
		}
	}
}

int main(){
	scanf("%d %d",&n,&k);
	t = n<<1|1;
	s = t + 1;
	addFlow(s1,s,0,k);
	for(int i = 1 ; i <= n ; ++i){
		scanf("%d %d",&xy[i].first,&xy[i].second);
	}
	sort(xy+1,xy+1+n);
	for(int i = 1 ; i <= n ; ++i){
		addFlow(i,i+n,xy[i].first-xy[i].second);
		addFlow(s,i,0,1);
		addFlow(i+n,t,0,1);
		for(int j = i + 1 ; j <= n ; ++j){
			if(xy[i].second<=xy[j].first) addFlow(i+n,j,0);
		}
	}
	MCMF(s1,t);
	printf("%lld\n",-mnCost);
	return 0;
}

/*
https://www.luogu.com.cn/problem/P2762
*/

/*
 * BFS检测连通图判断关键路径
 */

#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
#include <iostream>

using namespace std;
typedef long long ll;
const int MAXN = 200005, MAXM = 500005;
const ll INFL = 0x3f3f3f3f3f3f3f3f;

int head[MAXN], tot = 1;

struct Edge{
    int u, to, next;
    ll flow;
}G[MAXM];

inline void addEdge(int u, int v, ll w){
    G[++tot].u = u;
    G[tot].to = v;
    G[tot].flow = w;
    G[tot].next = head[u];
    head[u] = tot;
}

inline void addFlow(int u, int v, ll f = INFL){
    addEdge(u,v,f);
    addEdge(v,u,0);
}

int n, m, s, t, d[MAXN], dis[MAXN], now[MAXN];
bool isAns[MAXN], vis[MAXN];
ll mxFlow, sum;

void BFS(int t, int s){
	int front = 1, rear = 1, q[MAXN];
	q[rear++] = t;
	++d[dis[t]=1];
	while(front<rear){
		int np = q[front++];
		for(int i = head[np], to ; i ; i = G[i].next){
			to = G[i].to;
			if(dis[to]) continue;
			q[rear++] = to;
			++d[dis[to]=dis[np]+1];
		}
	}
}

ll DFS(int np, ll flow){
	if(np==t) return flow;
	ll res = 0;
	for(int &i = now[np], to ; i ; i = G[i].next){
		to = G[i].to;
		if(G[i].flow&&dis[to]==dis[np]-1){
			ll k = DFS(to,min(flow-res,G[i].flow));
			if(k) G[i].flow -= k, G[i^1].flow += k, res += k;
			if(res==flow) return flow;
		}
	}
	(--d[dis[np]])?(++d[++dis[np]]):(dis[s]=n+m+2);
	return res;
}

void ISAP(int s, int t){
	BFS(t,s);
	while(dis[s]<=n+m+1){
		memcpy(now,head,sizeof(head));
		mxFlow += DFS(s,INFL);
	}
}

void BFS_out(int np){
	queue<int> q;
	q.push(np);
	vis[np] = true;
	while(!q.empty()){
		int np = q.front(); q.pop();
		for(int i = head[np], to ; i ; i = G[i].next){
			if(!G[i].flow) continue;
			to = G[i].to;
			if(!vis[to]){
				vis[to] = true;
				q.push(to);
			}
		}
	}
}

int main(){
	scanf("%d %d\n",&m,&n);
	t = m + n + 1;
	for(int i = 1, a ; i <= m ; ++i){
		scanf("%d",&a);
		addFlow(s,i,a);
		sum += a;
		while(getchar()!='\n'){
			scanf("%d",&a);
			addFlow(i,m+a);
		}
	}
	for(int i = 1, a ; i <= n ; ++i){
		scanf("%d",&a);
		addFlow(m+i,t,a);
	}
	ISAP(s,t);
	BFS_out(s);
	
	for(int i = 1 ; i <= m ; ++i){
		if(vis[i]) printf("%d ",i);
	}
	puts("");
	for(int i = m + 1 ; i <= n + m ; ++i){
		if(vis[i]) printf("%d ",i-m);
	}
	puts("");
	printf("%lld\n",sum-mxFlow);
    return 0;
}

/*
https://www.luogu.com.cn/problem/P1251
*/

#include <cstdio>
#include <algorithm>
#include <queue>

using namespace std;
typedef long long ll;
const ll INFL = 0x3f3f3f3f3f3f3f3f;
const int MAXN = 5005, MAXM = 50005;

int head[MAXN], tot = 1;

struct Edge{
    int u, to, cost, next;
    ll flow;
}G[MAXM<<1];

inline void addEdge(int u, int v, int c, ll f){
    G[++tot].u = u;
    G[tot].to = v;
    G[tot].cost = c;
    G[tot].flow = f;
    G[tot].next = head[u];
    head[u] = tot;
}

inline void addFlow(int u, int v, int c, ll f = INFL){
    addEdge(u,v,c,f);
    addEdge(v,u,-c,0);
}

int n, s, t, last[MAXM<<1], pre[MAXN], p, d1, c1, d2, c2, a[MAXN];
deque<int> dq;
bool inq[MAXN];
ll dis[MAXN], flow[MAXN], mxFlow, mnCost;

bool SPFA(int s, int t){
    for(int i = s ; i <= t ; ++i) dis[i] = flow[i] = INFL;
    dis[s] = 0;
    dq.push_front(s);
    inq[s] = true;
    while(!dq.empty()){
        int np = dq.front(); dq.pop_front();
        inq[np] = false;
        for(int i = head[np], to ; i ; i = G[i].next){
            to = G[i].to;
            if(G[i].flow>0&&(dis[to]>dis[np]+G[i].cost)){
                dis[to] = dis[np]+G[i].cost;
                flow[to] = min(flow[np],G[i].flow);
                last[to] = i;
                pre[to] = np;
                if(!inq[to]){
                    inq[to] = true;
                    if(dq.empty()||dis[to]<=dis[dq.front()]) dq.push_front(to);
                    else dq.push_back(to);
                }
            }
        }
    }
    return (dis[t] ^ INFL);
}

void MCMF(int s, int t){
    while(SPFA(s,t)){
        mxFlow += flow[t];
        mnCost += flow[t] * dis[t];
        int np = t;
        while(np^s){
            G[last[np]].flow -= flow[t];
            G[last[np]^1].flow += flow[t];
            np = pre[np];
        }
    }
}

int main(){
    scanf("%d",&n);
    t = n<<1|1;
    for(int i = 1 ; i <= n ; ++i){
    	scanf("%d",&a[i]);
    }
    scanf("%d %d %d %d %d",&p,&d1,&c1,&d2,&c2);
    for(int i = 1 ; i <= n ; ++i){
    	addFlow(i,t,0,a[i]); // 早上需要消耗a[i]条干净餐巾纸
    	addFlow(s,i+n,0,a[i]); // 晚上获得a[i]条脏餐巾纸
    	addFlow(s,i,p); // 早上花费p/条买餐巾纸
    }
    for(int i = 1 + d1 ; i <= n ; ++i){
    	addFlow(i-d1+n,i,c1); // 快洗
    }
    for(int i = 1 + d2 ; i <= n ; ++i){
    	addFlow(i-d2+n,i,c2); // 慢洗
    }
    for(int i = 2 ; i <= n ; ++i){
    	addFlow(i+n-1,i+n,0); // 脏餐巾纸可以留到第二天晚上
    }
    MCMF(s,t);
    printf("%lld\n",mnCost);
    return 0;
}
