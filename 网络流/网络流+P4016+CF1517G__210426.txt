/*
https://www.luogu.com.cn/problem/P4016
P4016 负载平衡问题
题目描述
GG 公司有 nn 个沿铁路运输线环形排列的仓库，每个仓库存储的货物数量不等。如何用最少搬运量可以使 nn 个仓库的库存数量相同。搬运货物时，只能在相邻的仓库之间搬运。

输入格式
第一行一个正整数 nn，表示有 nn 个仓库。

第二行 nn 个正整数，表示 nn 个仓库的库存量。

输出格式
输出最少搬运量。
*/

/*
 * 第i个仓库小于平均值，说明需要从别的仓库运过来货物，将超级源点跟i连接，流量为平均值-货物
 * 第i个仓库大于平均值，说明需要将货物运到其他仓库去，将i跟超级汇点连接，流量为货物-平均值
 * 相邻的仓库连上费用为1，流量无限的无向边
 * 再跑MCMF，求出最小花费
 */

#include <cstdio>
#include <algorithm>
#include <queue>
#include <iostream>
#define CHECK(x) cout << (#x) << " is " << (x) << endl;

inline int read(){
	int x = 0, f = 1;
	char ch = getchar();
	while(ch<'0'||ch>'9'){
		if(ch=='-')
			f = -1;
		ch = getchar();
	}
	while(ch>='0'&&ch<='9'){
		x=(x<<1)+(x<<3)+(ch^48);
		ch = getchar();
	}
	return x*f;
}

using namespace std;
typedef long long ll;
const int MAXN = 200005, MAXM = 500005, INF = 1e9;

int head[MAXN], tot = 1;

struct Edge{
	int u, to, flow, cost, next;
}G[MAXM];

inline void addEdge(int u, int v, int c, int f){
	G[++tot].u = u;
	G[tot].to = v;
	G[tot].flow = f;
	G[tot].cost = c;
	G[tot].next = head[u];
	head[u] = tot;
}

inline void addFlow(int u, int v, int c, int f = INF){
	addEdge(u,v,c,f);
	addEdge(v,u,-c,0);
}

int n, a[MAXN], aver, s = 0, t = 101;

int dis[MAXN], last[MAXN], flow[MAXN], pre[MAXN], mnCost, mxFlow;
bool inq[MAXN];
deque<int> dq;

bool SPFA(int s, int t){
	for(int i = 0 ; i <= t ; ++i) dis[i] = flow[i] = INF;
	dis[s] = 0;
	dq.push_front(s);
	inq[s] = true;
	while(!dq.empty()){
		int np = dq.front(); dq.pop_front();
		inq[np] = false;
		for(int i = head[np], to ; i ; i = G[i].next){
			to = G[i].to;
			if(G[i].flow<=0) continue;
			if(dis[to]>dis[np]+G[i].cost){
				dis[to] = dis[np] + G[i].cost;
				pre[to] = np;
				flow[to] = min(flow[np],G[i].flow);
				last[to] = i;
				if(!inq[to]){
					inq[to] = true;
					if(dq.empty()||dis[to]>dis[dq.front()]) dq.push_back(to);
					else dq.push_front(to);
				}
			}
		}
	}
	return (dis[t] ^ INF);
}

void MCMF(int s, int t){
	while(SPFA(s,t)){
		int np = t;
		mnCost += dis[t] * flow[t];
		mxFlow += flow[t];
		while(np^s){
			G[last[np]].flow -= flow[t];
			G[last[np]^1].flow += flow[t];
			np = pre[np];
		}
	}
}

int main(){
	n = read();
	for(int i = 1 ; i <= n ; ++i){
		a[i] = read();
		aver += a[i];
	}
	aver /= n;
	for(int i = 1 ; i <= n ; ++i){
		if(i^n){
			addFlow(i,i+1,1,INF);
			addFlow(i+1,i,1,INF);
		}
		if(a[i]-aver<0) addFlow(i,t,0,aver-a[i]);
		else if(a[i]-aver>0) addFlow(s,i,0,a[i]-aver);
	}
	addFlow(n,1,1,INF);
	addFlow(1,n,1,INF);
	
	MCMF(s,t);
	
	cout<<mnCost<<endl;
	return 0;
}

/*
https://codeforces.com/problemset/problem/1517/G
G. Starry Night Camping
time limit per test2 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
At the foot of Liyushan Mountain, n tents will be carefully arranged to provide accommodation for those who are willing to experience the joy of approaching nature, the tranquility of the night, and the bright starry sky.

The i-th tent is located at the point of (xi,yi) and has a weight of wi. A tent is important if and only if both xi and yi are even. You need to remove some tents such that for each remaining important tent (x,y), there do not exist 3 other tents (x′1,y′1), (x′2,y′2) and (x′3,y′3) such that both conditions are true:

|x′j−x|,|y′j−y|≤1 for all j∈{1,2,3}, and
these four tents form a parallelogram (or a rectangle) and one of its sides is parallel to the x-axis.
Please maximize the sum of the weights of the tents that are not removed. Print the maximum value.

Input
The first line contains a single integer n (1≤n≤1000), representing the number of tents.

Each of the next n lines contains three integers xi, yi and wi (−109≤xi,yi≤109, 1≤wi≤109), representing the coordinate of the i-th tent and its weight. No two tents are located at the same point.

Output
A single integer — the maximum sum of the weights of the remaining tents.
*/

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <cmath>

using namespace std;
typedef long long ll;
const int MAXN = 1005, INF = 1e9;
const ll INFL = 0x3f3f3f3f3f3f3f3f;

int head[MAXN<<1], tot = 1;

struct Edge{
	int u, to, next;
	ll flow;
}G[1000005];

inline void addEdge(int u, int v, int f){
	G[++tot].u = u;
	G[tot].to = v;
	G[tot].flow = f;
	G[tot].next = head[u];
	head[u] = tot;
}

inline void addFlow(int u, int v, ll f = INFL){
	addEdge(u,v,f);
	addEdge(v,u,0);
}

int n, x[MAXN], y[MAXN], w[MAXN], now[MAXN<<1], s = 0, t = 2001;
ll sumWi, dis[MAXN<<1], mxFlow;

bool BFS(int s, int t){
	for(int i = 0 ; i <= 2001 ; ++i) dis[i] = 0;
	queue<int> q;
	q.push(s);
	dis[s] = 1;
	now[s] = head[s];
	while(!q.empty()){
		int np = q.front(); q.pop();
		for(int i = head[np], to ; i ; i = G[i].next){
			to = G[i].to;
			if(dis[to]||!G[i].flow) continue;
			now[to] = head[to];
			dis[to] = dis[np] + 1;
			q.push(to);
		}
	}
	return dis[t];
}

inline ll DFS(int np, ll flow){
	if(np==t) return flow;
	ll res = 0;
	for(int i = now[np], to ; i ; i = G[i].next){
		now[np] = i;
		to = G[i].to;
		if(!G[i].flow||dis[to]^(dis[np]+1)) continue;
		ll k = DFS(to,min(flow,G[i].flow));
		if(k==0) dis[to] = 0;
		G[i].flow -= k;
		G[i ^ 1].flow += k;
		res += k;
		flow -= k;
	}
	return res;
}

void dinic(int s, int t){
	while(BFS(s,t)) mxFlow += DFS(s,INFL);
}

int main(){
	scanf("%d",&n);
	for(int i = 1 ; i <= n ; ++i){
		scanf("%d %d %d",&x[i],&y[i],&w[i]);
		sumWi += w[i];
	}
	
	for(int i = 1 ; i <= n ; ++i){
		addFlow(i,i+n,w[i]);
		if((x[i]&1)&&!(y[i]&1)) addFlow(s,i);
		if((x[i]&1)&&(y[i]&1)) addFlow(i+n,t);
	}
	
	for(int i = 1 ; i <= n ; ++i){
		for(int j = 1 ; j <= n ; ++j){
			if(i==j) continue;
			if(abs(x[i]-x[j])+abs(y[i]-y[j])>1) continue;
			if((x[i]&1)&&!(y[i]&1)&&!(x[j]&1)&&!(y[j]&1)) addFlow(i+n,j);
			if(!(x[i]&1)&&!(y[i]&1)&&!(x[j]&1)&&(y[j]&1)) addFlow(i+n,j);
			if(!(x[i]&1)&&(y[i]&1)&&(x[j]&1)&&(y[j]&1)) addFlow(i+n,j);
		}
	}
	
	dinic(s,t);
	
	// cout<<mxFlow<<endl;
	cout<<sumWi-mxFlow<<endl;
	
	return 0;
}