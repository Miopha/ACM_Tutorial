/*
http://poj.org/problem?id=2135
Farm Tour
Time Limit: 1000MS		Memory Limit: 65536K
Total Submissions: 23243		Accepted: 8891
Description

When FJ's friends visit him on the farm, he likes to show them around. His farm comprises N (1 <= N <= 1000) fields numbered 1..N, the first of which contains his house and the Nth of which contains the big barn. A total M (1 <= M <= 10000) paths that connect the fields in various ways. Each path connects two different fields and has a nonzero length smaller than 35,000.

To show off his farm in the best way, he walks a tour that starts at his house, potentially travels through some fields, and ends at the barn. Later, he returns (potentially through some fields) back to his house again.

He wants his tour to be as short as possible, however he doesn't want to walk on any given path more than once. Calculate the shortest tour possible. FJ is sure that some tour exists for any given farm.
Input

* Line 1: Two space-separated integers: N and M.

* Lines 2..M+1: Three space-separated integers that define a path: The starting field, the end field, and the path's length.
Output

A single line containing the length of the shortest tour.
Sample Input

4 5
1 2 1
2 3 1
3 4 1
1 3 2
2 4 2
Sample Output

6
*/

/*
 * 令源点连接1点，流量为2，费用为0，数据给的路径（双向）流量为1，费用为w
 * 然后开始跑最小费用最大流，最小费用就是答案
 */

#include <cstdio>
#include <algorithm>
#include <queue>
#include <iostream>
#define CHECK(x) cout << (#x) << " is " << (x) << endl;

inline int read(){
	int x = 0, f = 1;
	char ch = getchar();
	while(ch<'0'||ch>'9'){
		if(ch=='-')
			f = -1;
		ch = getchar();
	}
	while(ch>='0'&&ch<='9'){
		x=(x<<1)+(x<<3)+(ch^48);
		ch = getchar();
	}
	return x*f;
}

using namespace std;
typedef long long ll;
const int MAXN = 200005, MAXM = 500005, INF = 0x3f3f3f3f;

int head[MAXN], tot = 1;

struct Edge{
	int u, to, flow, cost, next;
}G[MAXM];

inline void addEdge(int u, int v, int w, int c){
	G[++tot].u = u;
	G[tot].to = v;
	G[tot].flow = w;
	G[tot].cost = c;
	G[tot].next = head[u];
	head[u] = tot;
}

int n, m, dis[MAXN], last[MAXN], flow[MAXN], pre[MAXN], mnCost;
bool inq[MAXN];
deque<int> dq;

bool SPFA(int s, int t){
	for(int i = 0 ; i <= n ; ++i) dis[i] = flow[i] = INF;
	dis[s] = 0;
	dq.push_front(s);
	inq[s] = true;
	while(!dq.empty()){
		int np = dq.front(); dq.pop_front();
		inq[np] = false;
		for(int i = head[np], to ; i ; i = G[i].next){
			to = G[i].to;
			if(G[i].flow<=0) continue;
			if(dis[to]>dis[np]+G[i].cost){
				dis[to] = dis[np] + G[i].cost;
				pre[to] = np;
				flow[to] = min(flow[np],G[i].flow);
				last[to] = i;
				if(!inq[to]){
					inq[to] = true;
					if(dq.empty()||dis[to]>dis[dq.front()]) dq.push_back(to);
					else dq.push_front(to);
				}
			}
		}
	}
	return dis[t] ^ INF;
}

void MCMF(int s, int t){
	while(SPFA(s,t)){
		int np = t;
		mnCost += dis[t] * flow[t];
		while(np^s){
			G[last[np]].flow -= flow[t];
			G[last[np]^1].flow += flow[t];
			np = pre[np];
		}
	}
}

int main(){
	n = read();
	m = read();
	for(int i = 1, u, v, w ; i <= m ; ++i){
		u = read();
		v = read();
		w = read();
		addEdge(u,v,1,w);
		addEdge(v,u,0,-w);
		addEdge(v,u,1,w);
		addEdge(u,v,0,-w);
	}
	addEdge(0,1,2,0);
	addEdge(1,0,0,0);
	addEdge(1,0,2,0);
	addEdge(0,1,0,0);
	MCMF(0,n);
	printf("%d\n",mnCost);
	return 0;
}