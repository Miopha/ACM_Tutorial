/*
https://codeforces.com/problemset/problem/1463/C
C. Busy Robot
time limit per test2 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
You have a robot that can move along a number line. At time moment 0 it stands at point 0.

You give n commands to the robot: at time ti seconds you command the robot to go to point xi. Whenever the robot receives a command, it starts moving towards the point xi with the speed of 1 unit per second, and he stops when he reaches that point. However, while the robot is moving, it ignores all the other commands that you give him.

For example, suppose you give three commands to the robot: at time 1 move to point 5, at time 3 move to point 0 and at time 6 move to point 4. Then the robot stands at 0 until time 1, then starts moving towards 5, ignores the second command, reaches 5 at time 6 and immediately starts moving to 4 to execute the third command. At time 7 it reaches 4 and stops there.

You call the command i successful, if there is a time moment in the range [ti,ti+1] (i. e. after you give this command and before you give another one, both bounds inclusive; we consider tn+1=+∞) when the robot is at point xi. Count the number of successful commands. Note that it is possible that an ignored command is successful.

Input
The first line contains a single integer t (1≤t≤1000) — the number of test cases. The next lines describe the test cases.

The first line of a test case contains a single integer n (1≤n≤105) — the number of commands.

The next n lines describe the commands. The i-th of these lines contains two integers ti and xi (1≤ti≤109, −109≤xi≤109) — the time and the point of the i-th command.

The commands are ordered by time, that is, ti<ti+1 for all possible i.

The sum of n over test cases does not exceed 105.

Output
For each testcase output a single integer — the number of successful commands.
*/

/*
 * 用vector模拟一个时间轴，再遍历n次检查第i个是否为successful
 * 总复杂度O(nlogn)，logn来自检查时的二分查找
 * os:朴素的思维，复杂的实现，调了1个多小时，看到官方题解二十几行代码整个人都不好了
 */

#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
#include <cstring>
#include <algorithm>
#include <cmath>
#define max(a,b) ((a) > (b) ? (a) : (b))
#define min(a,b) ((a) < (b) ? (a) : (b))
#define pb push_back
#define cl clear
#define mp make_pair

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<ll,ll> P;
const int INF = 1e9;
const int MAXN = 100005;

inline int read(){
	int x = 0, f = 1;
	char ch = getchar();
	while(ch<'0'||ch>'9'){
		if(ch=='-')
			f = -1;
		ch = getchar();
	}
	while(ch>='0'&&ch<='9'){
		x=(x<<1)+(x<<3)+(ch^48);
		ch = getchar();
	}
	return x*f;
}

ll t[MAXN], time[MAXN];
int n, x[MAXN], cnt, ans;
vector<P> pos;

void solve(){
	pos.clear();
	cnt = ans = 0;
	n = read();
	for(int i = 1 ; i <= n ; ++i){
		t[i] = read();
		x[i] = read();
	}
	t[n+1] = 1e10;
	pos.pb(mp(0,0));
	for(int i = 1 ; i <= n ; ++i){
		if(t[i]>=pos.back().first){
			time[++cnt] = 1ll*t[i]+abs(x[i]-pos.back().second);
			pos.pb(mp(1ll*t[i]+abs(x[i]-pos.back().second),x[i]));
		}
	}
	time[++cnt] = 1e12;
	pos.pb(mp(1e12,pos.back().second));
	for(int i = 1, s, e, greater ; i <= n ; ++i){
		s = lower_bound(time,time+cnt+1,t[i]) - time;
		e = lower_bound(time,time+cnt+1,t[i+1]) - time;
		// printf("i=%d s=%d e=%d\n",i,s,e);
		if((pos[s-1].second<=x[i]&&x[i]<=pos[s].second)||(pos[s-1].second>=x[i]&&x[i]>=pos[s].second)){
			ll xt;
			if(pos[s-1].second==x[i]){
				xt = pos[s].first - abs(pos[s].second-pos[s-1].second);
			}else{
				xt = pos[s].first - abs(pos[s].second-x[i]);
			}
			if(xt>=pos[s-1].first&&t[i]<=xt&&xt<=t[i+1]){
				// printf("xt=%d i=%d 4\n",xt,i);
				++ans;
				continue;
			}
		}
		bool b = false;
		for(int idx = s + 1 ; idx <= e && t[i+1] >= pos[idx].first ; ++idx){
			if(pos[idx-1].second<=x[i]&&x[i]<=pos[idx].second){
				// printf("idx=%d t[i]=%d t[i+1]=%d i=%d 1\n",idx,t[i],t[i+1],i);
				++ans;
				b = true;
				break;
			}
			if(pos[idx-1].second>=x[i]&&x[i]>=pos[idx].second){
				// printf("t[i]=%d t[i+1]=%d idx=%d i=%d 2\n",t[i],t[i+1],idx,i);
				++ans;
				b = true;
				break;
			}
		}
		if(b) continue;
		if((pos[e+1].second<=x[i]&&x[i]<=pos[e].second)||(pos[e+1].second>=x[i]&&x[i]>=pos[e].second)){
			// printf("%d here\n",i);
			ll xt;
			if(pos[e].second==x[i]){
				xt = pos[e].first;
				// printf("xt=%d here\n");
			}else{
				xt = pos[e+1].first - abs(pos[e+1].second-x[i]);
			}
			if(xt>=pos[e].first&&t[i]<=xt&&xt<=t[i+1]){
				// printf("xt=%d i=%d 3\n",xt,i);
				++ans;
				continue;
			}
		}
	}
	printf("%d\n",ans);
}

int main(){
    int t = 1;
    t = read();
    while(t--) solve();
    return 0;
}
