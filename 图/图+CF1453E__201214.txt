/*
https://codeforces.com/contest/1453/problem/E
E. Dog Snacks
time limit per test3 seconds
memory limit per test512 megabytes
inputstandard input
outputstandard output
Gildong is playing with his dog, Badugi. They're at a park that has n intersections and n−1 bidirectional roads, each 1 meter in length and connecting two intersections with each other. The intersections are numbered from 1 to n, and for every a and b (1≤a,b≤n), it is possible to get to the b-th intersection from the a-th intersection using some set of roads.

Gildong has put one snack at every intersection of the park. Now Gildong will give Badugi a mission to eat all of the snacks. Badugi starts at the 1-st intersection, and he will move by the following rules:

Badugi looks for snacks that are as close to him as possible. Here, the distance is the length of the shortest path from Badugi's current location to the intersection with the snack. However, Badugi's sense of smell is limited to k meters, so he can only find snacks that are less than or equal to k meters away from himself. If he cannot find any such snack, he fails the mission.
Among all the snacks that Badugi can smell from his current location, he chooses a snack that minimizes the distance he needs to travel from his current intersection. If there are multiple such snacks, Badugi will choose one arbitrarily.
He repeats this process until he eats all n snacks. After that, he has to find the 1-st intersection again which also must be less than or equal to k meters away from the last snack he just ate. If he manages to find it, he completes the mission. Otherwise, he fails the mission.
Unfortunately, Gildong doesn't know the value of k. So, he wants you to find the minimum value of k that makes it possible for Badugi to complete his mission, if Badugi moves optimally.

Input
Each test contains one or more test cases. The first line contains the number of test cases t (1≤t≤104).

The first line of each test case contains one integer n (2≤n≤2⋅105) — the number of intersections of the park.

The next n−1 lines contain two integers u and v (1≤u,v≤n, u≠v) each, which means there is a road between intersection u and v. All roads are bidirectional and distinct.

It is guaranteed that:

For each test case, for every a and b (1≤a,b≤n), it is possible to get to the b-th intersection from the a-th intersection.
The sum of n in all test cases doesn't exceed 2⋅105.
Output
For each test case, print one integer — the minimum possible value of k such that Badugi can complete the mission.
*/

/*
 * 定义f(x)是x节点子树中深度最小的叶子点深度
 * 为了让k尽量小，要从f(x)小的叶子节点转移到另一个f(x)比它大的叶子节点
 * 因为最后还要回到根节点1，所以要f(x)+1<=k
 */
 
#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
#include <cstring>
#include <algorithm>
#include <cmath>
#define pb push_back
#define cl clear
#define mp make_pair

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> P;
const int INF = 1e9;
const int MAXN = 200005;

inline int read(){
	int x = 0, f = 1;
	char ch = getchar();
	while(ch<'0'||ch>'9'){
		if(ch=='-')
			f = -1;
		ch = getchar();
	}
	while(ch>='0'&&ch<='9'){
		x=(x<<1)+(x<<3)+(ch^48);
		ch = getchar();
	}
	return x*f;
}

int head[MAXN], tot, deg[MAXN], ans, n;

struct Edge{
    int u, to, next;
}G[MAXN<<1];

inline void addEdge(int u, int v){
    G[++tot].u = u;
    G[tot].to = v;
    G[tot].next = head[u];
    head[u] = tot;
}

bool cmp(const int a, const int b){
	return a > b;
}

inline int DFS(int cur, int fat){
	if(deg[cur]==1&&cur^1){
		return 1;
	}
	vector<int> val;
	for(int i = head[cur], to ; i ; i = G[i].next){
		to = G[i].to;
		if(to^fat){
			val.pb(DFS(to,cur)); 
		}
	}
	sort(val.begin(),val.end(),cmp);
	if(val.size()>1){
		if(cur==1){
			ans = max(ans,max(val[0],val[1]+1));
		}else{
			ans = max(ans,val[0]+1);
		}
	}
	ans = max(ans,val.back());
	return val.back() + 1;
}

void solve(){
	n = read();
	for(int i = 1 ; i <= n ; ++i) head[i] = deg[i] = 0;
	tot = ans = 0;
	for(int i = 1, u, v ; i < n ; ++i){
		u = read();
		v = read();
		addEdge(u,v);
		addEdge(v,u);
		++deg[u];
		++deg[v];
	}
	DFS(1,0);
	printf("%d\n",ans);
}

int main(){
    int t = 1;
    t = read();
    while(t--) solve();
    return 0;
}
