/*
https://www.luogu.com.cn/problem/P5536
题目描述
X 国有 nn 座城市，n − 1n−1 条长度为 11 的道路，每条道路连接两座城市，且任意两座城市都能通过若干条道路相互到达，显然，城市和道路形成了一棵树。

X 国国王决定将 kk 座城市钦定为 X 国的核心城市，这 kk 座城市需满足以下两个条件：

这 kk 座城市可以通过道路，在不经过其他城市的情况下两两相互到达。
定义某个非核心城市与这 kk 座核心城市的距离为，这座城市与 kk 座核心城市的距离的最小值。那么所有非核心城市中，与核心城市的距离最大的城市，其与核心城市的距离最小。你需要求出这个最小值。
输入格式
第一行 22 个正整数 n,kn,k。

接下来 n - 1n−1 行，每行 22 个正整数 u,vu,v，表示第 uu 座城市与第 vv 座城市之间有一条长度为 11 的道路。

数据范围：

1 \le k < n \le 10 ^ 51≤k<n≤10 
5
 。
1 \le u,v \le n, u \ne v1≤u,v≤n,u

=v，保证城市与道路形成一棵树。
输出格式
一行一个整数，表示答案。
*/

/*
 * 如果只选一个点，那么这个点一定在树的直径上
 * 有了题目只能选相邻的点的限制条件，可以在第一个点上向外扩展
 * 由第一个点为根，用DFS，那么点距离其它点的最大距离为dis[i] = mxDepth[i] - depth[i]， mxDepth[i]是i点能走的最大深度，depth[i]是i点的深度
 */
 
#include <cstdio>
#include <iostream>
#include <algorithm>
#define CHECK(x) cout << (#x) << " is " << (x) << endl;

using namespace std;
const int MAXN  = 1e5 + 5;

int head[MAXN], tot;

struct Edge{
	int to, nxt;
}G[MAXN<<1];

inline void addEdge(int u, int v){
	G[++tot].to = v;
	G[tot].nxt = head[u];
	head[u] = tot;
}

int n, k, s, d, path[MAXN], dPath[MAXN], deg[MAXN], depth[MAXN], maxDepth[MAXN], dis[MAXN];

inline void realDiameter(int np, int fat, int dis){
	path[dis] = np;
	for(int i = head[np], to ; i ; i = G[i].nxt){
		to = G[i].to;
		if(to==fat) continue;
		realDiameter(to,np,dis+1);
	}
	if(dis>d){
		d = dis;
		if(deg[np]==1) for(int i = 0 ; i <= dis ; ++i) dPath[i] = path[i];
	}
}

inline void diameter(int np, int fat, int dis){
	path[dis] = np;
	for(int i = head[np], to ; i ; i = G[i].nxt){
		to = G[i].to;
		if(to==fat) continue;
		diameter(to,np,dis+1);
	}
	if(dis>d){
		d = dis;
		s = np;
		if(deg[np]==1) for(int i = 0 ; i <= dis ; ++i) dPath[i] = path[i];
	}
}	

inline void DFS(int np, int fat){
	maxDepth[np] = depth[np] = depth[fat] + 1;
	for(int i = head[np], to ; i ; i = G[i].nxt){
		to = G[i].to;
		if(to^fat){
			DFS(to,np);
			maxDepth[np] = max(maxDepth[np],maxDepth[to]);
		}
	}
}

int main(){
	scanf("%d %d",&n,&k);
	for(int i = 1, u, v ; i < n ; ++i){
		scanf("%d %d",&u,&v);
		addEdge(u,v);
		addEdge(v,u);
		++deg[u];
		++deg[v];
	}
	diameter(1,0,0);
	realDiameter(s,0,0);
	// for(int i = 0 ; i <= d ; ++i) CHECK(dPath[i]);
	DFS(dPath[d>>1],0);
	for(int i = 1 ; i <= n ; ++i){
		dis[i] = maxDepth[i] - depth[i];
	}
	// for(int i = 1 ; i <= n ; ++i) CHECK(dis[i]);
	sort(dis+1,dis+1+n);
	printf("%d\n",dis[n-k]+1);
	return 0;
}

/*
https://www.luogu.com.cn/problem/P4408
Chris家的电话铃响起了，里面传出了Chris的老师焦急的声音：“喂，是Chris的家长吗？你们的孩子又没来上课，不想参加考试了吗？”一听说要考试，Chris的父母就心急如焚，他们决定在尽量短的时间内找到Chris。他们告诉Chris的老师：“根据以往的经验，Chris现在必然躲在朋友Shermie或Yashiro家里偷玩《拳皇》游戏。现在，我们就从家出发去找Chris，一但找到，我们立刻给您打电话。”说完砰的一声把电话挂了。

Chris居住的城市由N个居住点和若干条连接居住点的双向街道组成，经过街道x需花费Tx分钟。可以保证，任两个居住点间有且仅有一条通路。Chris家在点C，Shermie和Yashiro分别住在点A和点B。Chris的老师和Chris的父母都有城市地图，但Chris的父母知道点A、B、C的具体位置而Chris的老师不知。

为了尽快找到Chris，Chris的父母会遵守以下两条规则：

如果A距离C比B距离C近，那么Chris的父母先去Shermie家寻找Chris，如果找不到，Chris的父母再去Yashiro家；反之亦然。
Chris的父母总沿着两点间唯一的通路行走。
显然，Chris的老师知道Chris的父母在寻找Chris的过程中会遵守以上两条规则，但由于他并不知道A，B，C的具体位置，所以现在他希望你告诉他，最坏情况下Chris的父母要耗费多长时间才能找到Chris？

输入格式
输入文件第一行是两个整数N（3 ≤ N ≤ 200000）和M，分别表示居住点总数和街道总数。

以下M行，每行给出一条街道的信息。第i+1行包含整数Ui、Vi、Ti（1≤Ui, Vi ≤ N，1 ≤ Ti ≤ 1000000000），表示街道i连接居住点Ui和Vi，并且经过街道i需花费Ti分钟。街道信息不会重复给出。

输出格式
输出文件仅包含整数T，即最坏情况下Chris的父母需要花费T分钟才能找到Chris。
*/

/*
 * A和B在树直径的两端点上
 * C可能给在直径外，设点D在直径内
 * 现要找AB+min(AD,DB)+DC的最大值
 * D可以通过枚举树的直径的路径得出，C则是从D出发开始DFS，能走到的最大距离的点
 */
 
#include <cstdio>
#include <iostream>
#define CHECK(x) cout << (#x) << " is " << (x) << endl;

using namespace std;
typedef long long ll;
const int MAXN = 200000;

int head[MAXN], tot;

struct Edge{
	int u, to, val, nxt;
}G[MAXN<<1];

inline void addEdge(int u, int v, int w){
	G[++tot].u = u;
	G[tot].to = v;
	G[tot].val = w;
	G[tot].nxt = head[u];
	head[u] = tot;
}

int n, m, pre[MAXN], s, dp[MAXN];
ll d, ans;
bool vis[MAXN];

inline void diameter(int np, int fat, ll dis){
	pre[np] = fat;
	for(int i = head[np], to ; i ; i = G[i].nxt){
		to = G[i].to;
		if(to==fat) continue;
		diameter(to,np,dis+G[i].val);
	}
	if(dis>=d) s = np, d = dis;
}

void DFS(int np, ll ac, ll cb){
	ans = max(ans,d+min(ac,cb)+dp[np]);
	for(int i = head[np], to ; i ; i = G[i].nxt){
		to = G[i].to;
		if(to==pre[np]) DFS(to,ac+G[i].val,cb-G[i].val);
	}
}

inline void mxDis(int np, int fat){
	for(int i = head[np], to ; i ; i = G[i].nxt){
		to = G[i].to;
		if(vis[to]||to==fat) continue;
		mxDis(to,np);
		dp[np] = max(dp[np],dp[to]+G[i].val);
	}
}

int main(){
	scanf("%d %d",&n,&m);
	for(int i = 1, u, v, w ; i <= m ; ++i){
		scanf("%d %d %d",&u,&v,&w);
		addEdge(u,v,w);
		addEdge(v,u,w);
	}
	diameter(1,0,0);
	diameter(s,0,0);
	// s, AC, CB
	int tmp = s;
	while(tmp){
		vis[tmp] = true;
		tmp = pre[tmp];
	}
	tmp = s;
	while(tmp){
		mxDis(tmp,0);
		tmp = pre[tmp];
	}
	DFS(s,0,d);
	printf("%lld\n",ans);
	return 0;
}