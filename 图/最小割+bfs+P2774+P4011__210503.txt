/*
https://www.luogu.com.cn/problem/P2774
P2774 方格取数问题
题目描述
有一个 mm 行 nn 列的方格图，每个方格中都有一个正整数。现要从方格中取数，使任意两个数所在方格没有公共边，且取出的数的总和最大，请求出最大的和。

输入格式
第一行是两个用空格隔开的整数，分别代表方格图的行数 mm 和列数 nn。

第 22 到第 (m + 1)(m+1) 行，每行 nn 个整数，第 (i + 1)(i+1) 行的第 jj 个整数代表方格图第 ii 行第 jj 列的的方格中的数字 a_{i, j}a 
i,j
​	
 。

输出格式
输出一行一个整数，代表和最大是多少。
*/

/*
 * 默认把全部方块选上
 * 将方块染成黑白，超级源点连黑格，白格连超级汇点，流量为他们的值
 * 黑格连上被此黑格影响的白格
 * 然后用最大流求出最小割
 */

#include <iostream>
#include <queue>
#include <cstdio>
#define CHECK(x) cout << (#x) << " is " << (x) << endl;

using namespace std;
typedef long long ll;
const int MAXN = 105;
const ll INFL = 0x3f3f3f3f3f3f3f3f;

int head[MAXN*MAXN], tot = 1;

struct Edge{
	int u, to, next;
	ll flow;
}G[10000005];

inline void addEdge(int u, int v, ll w){
	G[++tot].u = u;
	G[tot].to = v;
	G[tot].flow = w;
	G[tot].next = head[u];
	head[u] = tot;
}

inline void addFlow(int u, int v, ll f = INFL){
	addEdge(u,v,f);
	addEdge(v,u,0);
}

int n, m, a[MAXN][MAXN], s = 0, t, sumWi;
ll dis[MAXN*MAXN], now[MAXN*MAXN];
ll mxFlow;

bool BFS(int s, int t){
	for(int i = 0 ; i <= t ; ++i) dis[i] = 0;
	queue<int> q;
	q.push(s);
	dis[s] = 1;
	now[s] = head[s];
	while(!q.empty()){
		int np = q.front(); q.pop();
		for(int i = head[np], to ; i ; i = G[i].next){
			to = G[i].to;
			if(dis[to]||!G[i].flow) continue;
			now[to] = head[to];
			dis[to] = dis[np] + 1;
			q.push(to);
		}
	}
	return dis[t];
}

inline ll DFS(int np, ll flow){
	if(np==t) return flow;
	ll res = 0;
	for(int i = now[np], to ; i ; i = G[i].next){
		now[np] = i;
		to = G[i].to;
		if(!G[i].flow||dis[to]^(dis[np]+1)) continue;
		ll k = DFS(to,min(flow,G[i].flow));
		if(k==0) dis[to] = 0;
		G[i].flow -= k;
		G[i ^ 1].flow += k;
		res += k;
		flow -= k;
	}
	return res;
}

void dinic(int s, int t){
	while(BFS(s,t)) mxFlow += DFS(s,INFL);
}

int main(){
	scanf("%d %d",&n,&m);
	t = 10002;
	for(int i = 1 ; i <= n ; ++i)
		for(int j = 1 ; j <= m ; ++j){
			// CHECK((i-1)*m+j);
			scanf("%d",&a[i][j]);
			if(((i&1)&&(j&1))||(!(i&1)&&!(j&1))){
				addFlow(s,(i-1)*m+j,a[i][j]);
				if(j^1) addFlow((i-1)*m+j,(i-1)*m+j-1);
				if(j^m) addFlow((i-1)*m+j,(i-1)*m+j+1);
				if(i^1) addFlow((i-1)*m+j,(i-1)*m+j-m);
				if(i^n) addFlow((i-1)*m+j,(i-1)*m+j+m);
			}else{
				addFlow((i-1)*m+j,t,a[i][j]);
			}
			sumWi += a[i][j];
		}
	
	dinic(s,t);
	
	// cout<<mxFlow<<endl;
	cout<<sumWi-mxFlow<<endl;
	return 0;
}

/*
https://www.luogu.com.cn/problem/P4011
P4011 孤岛营救问题
题目描述
19441944 年，特种兵麦克接到国防部的命令，要求立即赶赴太平洋上的一个孤岛，营救被敌军俘虏的大兵瑞恩。瑞恩被关押在一个迷宫里，迷宫地形复杂，但幸好麦克得到了迷宫的地形图。迷宫的外形是一个长方形，其南北方向被划分为 NN 行，东西方向被划分为 MM 列，于是整个迷宫被划分为 N\times MN×M 个单元。每一个单元的位置可用一个有序数对(单元的行号，单元的列号)来表示。南北或东西方向相邻的 22 个单元之间可能互通，也可能有一扇锁着的门，或者是一堵不可逾越的墙。迷宫中有一些单元存放着钥匙，并且所有的门被分成PP 类，打开同一类的门的钥匙相同，不同类门的钥匙不同。

大兵瑞恩被关押在迷宫的东南角，即 (N,M)(N,M) 单元里，并已经昏迷。迷宫只有一个入口，在西北角。也就是说，麦克可以直接进入 (1,1)(1,1) 单元。另外，麦克从一个单元移动到另一个相邻单元的时间为 11，拿取所在单元的钥匙的时间以及用钥匙开门的时间可忽略不计。

试设计一个算法，帮助麦克以最快的方式到达瑞恩所在单元，营救大兵瑞恩。

输入格式
第 11 行有 33 个整数，分别表示 N,M,PN,M,P 的值。

第 22 行是 11 个整数 KK，表示迷宫中门和墙的总数。

第 I+2I+2 行(1\leq I\leq K)(1≤I≤K)，有 55 个整数，依次为X_{i1},Y_{i1},X_{i2},Y_{i2},G_iX 
i1
​	
 ,Y 
i1
​	
 ,X 
i2
​	
 ,Y 
i2
​	
 ,G 
i
​	
 ：

当 G_i \geq 1G 
i
​	
 ≥1 时，表示 (X_{i1},Y_{i1})(X 
i1
​	
 ,Y 
i1
​	
 ) 单元与 (X_{i2},Y_{i2})(X 
i2
​	
 ,Y 
i2
​	
 ) 单元之间有一扇第 G_iG 
i
​	
  类的门

当 G_i=0G 
i
​	
 =0 时，表示 (X_{i1},Y_{i1})(X 
i1
​	
 ,Y 
i1
​	
 ) 单元与 (X_{i2},Y_{i2})(X 
i2
​	
 ,Y 
i2
​	
 ) 单元之间有一堵不可逾越的墙（其中，|X_{i1}-X_{i2}|+|Y_{i1}-Y_{i2}|=1∣X 
i1
​	
 −X 
i2
​	
 ∣+∣Y 
i1
​	
 −Y 
i2
​	
 ∣=1，0\leq G_i\leq P0≤G 
i
​	
 ≤P）。

第 K+3K+3 行是一个整数 SS，表示迷宫中存放的钥匙总数。

第 K+3+JK+3+J 行(1\leq J\leq S)(1≤J≤S)，有 33 个整数，依次为 X_{i1},Y_{i1},Q_iX 
i1
​	
 ,Y 
i1
​	
 ,Q 
i
​	
 ：表示第 JJ 把钥匙存放在 (X_{i1},Y_{i1})(X 
i1
​	
 ,Y 
i1
​	
 )单元里，并且第 JJ 把钥匙是用来开启第 Q_iQ 
i
​	
  类门的。（其中1\leq Q_i\leq P1≤Q 
i
​	
 ≤P）。

输入数据中同一行各相邻整数之间用一个空格分隔。

输出格式
将麦克营救到大兵瑞恩的最短时间的值输出。如果问题无解，则输出 -1−1。
*/

/*
 * 状压表示拥有的钥匙+BFS
 */
 
#include <map>
#include <cstdio>
#include <queue>
#include <iostream>
#define CHECK(x) cout << (#x) << " is " << (x) << endl;
#define mp make_pair

using namespace std;
typedef pair<pair<int,int>,int> triple;
const int MAXN = 15;

map<triple,bool> vis;

struct node{
	int x, y, stat, d;
	node(){x=y=stat=d=0;}
	node(int _x, int _y, int _stat, int _d){
		x = _x;
		y = _y;
		stat = _stat;
		d = _d;
	}
};

queue<node> q;
int n, m, p, k, s;
int key[MAXN][MAXN], banned[MAXN][MAXN][MAXN][MAXN];
int dir[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};

bool check(int x, int y, int dx, int dy, int stat){
	// position judge
	if(dx<1||dy<1||dx>n||dy>m) return true;
	// repeat judge
	if(vis[mp(mp(dx,dy),stat)]) return true;
	// block judge
	if(banned[x][y][dx][dy]){
		if(banned[x][y][dx][dy]==-1) return true;
		if((banned[x][y][dx][dy]&stat)!=banned[x][y][dx][dy]) return true;
	}
	return false;
}

int main(){
	scanf("%d %d %d\n%d",&n,&m,&p,&k);
	for(int i = 1, x1, y1, x2, y2, g ; i <= k ; ++i){
		scanf("%d %d %d %d %d",&x1,&y1,&x2,&y2,&g);
		if(!g) banned[x1][y1][x2][y2] = banned[x2][y2][x1][y1] = -1;
		else banned[x1][y1][x2][y2] = banned[x2][y2][x1][y1] = 1<<g;
	}
	scanf("%d",&s);
	for(int i = 1, x1, y1, q ; i <= s ; ++i){
		scanf("%d %d %d",&x1,&y1,&q);
		key[x1][y1] |= 1<<q;
	}
	q.push(node(1,1,0,0));
	while(!q.empty()){
		node np = q.front(); q.pop();
		/*
		CHECK(np.x);
		CHECK(np.y);
		CHECK(np.stat);
		*/
		vis[mp(mp(np.x,np.y),np.stat)] = true;
		for(int i = 0, dx, dy, newStat ; i < 4 ; ++i){
			dx = np.x + dir[i][0];
			dy = np.y + dir[i][1];
			newStat = np.stat|key[dx][dy];
			if(check(np.x,np.y,dx,dy,np.stat)) continue;
			if(dx==n&&dy==m){
				printf("%d\n",np.d+1);
				return 0;
			}
			
			q.push(node(dx,dy,newStat,np.d+1));
		}
	}
	puts("-1");
	return 0;
}