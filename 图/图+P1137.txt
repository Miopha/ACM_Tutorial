/*
https://www.luogu.com.cn/problem/P1137
题目描述
小明要去一个国家旅游。这个国家有#N个城市，编号为1至N，并且有M条道路连接着，小明准备从其中一个城市出发，并只往东走到城市i停止。

所以他就需要选择最先到达的城市，并制定一条路线以城市i为终点，使得线路上除了第一个城市，每个城市都在路线前一个城市东面，并且满足这个前提下还希望游览的城市尽量多。

现在，你只知道每一条道路所连接的两个城市的相对位置关系，但并不知道所有城市具体的位置。现在对于所有的i，都需要你为小明制定一条路线，并求出以城市i为终点最多能够游览多少个城市。

输入格式
第1行为两个正整数N, M

接下来M行，每行两个正整数x, y，表示了有一条连接城市x与城市y的道路，保证了城市x在城市y西面。

输出格式
N行，第i行包含一个正整数，表示以第i个城市为终点最多能游览多少个城市。
*/

/*
 * 相当于问第i个城市向西走最多能走多少个城市，记忆化优化
 */
 
#include <cstdio>
#include <iostream>

using namespace std;
const int MAXN = 100005, MAXM = 200005;

inline int read(){
	int x = 0, f = 1;
	char ch = getchar();
	while(ch<'0'||ch>'9'){
		if(ch=='-')
			f = -1;
		ch = getchar();
	}
	while(ch>='0'&&ch<='9'){
		x=(x<<1)+(x<<3)+(ch^48);
		ch = getchar();
	}
	return x*f;
}

int head[MAXN], tot;

struct Edge{
    int u, to, next;
}G[MAXM];

inline void addEdge(int u, int v){
    G[++tot].u = u;
    G[tot].to = v;
    G[tot].next = head[u];
    head[u] = tot;
}

int n, m, ans[MAXN];

int DFS(int x){
	if(ans[x]) return ans[x];
	int sum = 0;
	for(int i = head[x], to ; i ; i = G[i].next){
		to = G[i].to;
		sum = max(sum,DFS(to));
	}
	return ans[x] = sum + 1;
}

int main(){
	n = read();
	m = read();
	for(int i = 1, u, v ; i <= m ; ++i){
		u = read();
		v = read();
		addEdge(v,u);
	}
	for(int i = 1 ; i <= n ; ++i){
		DFS(i);
	}
	for(int i = 1 ; i <= n ; ++i){
		printf("%d\n",ans[i]);
	}
	return 0;
}