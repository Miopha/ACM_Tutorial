/*
https://www.acwing.com/problem/content/1222/
在X森林里，上帝创建了生命之树。

他给每棵树的每个节点（叶子也称为一个节点）上，都标了一个整数，代表这个点的和谐值。

上帝要在这棵树内选出一个非空节点集 S，使得对于 S 中的任意两个点 a,b，都存在一个点列 {a,v1,v2,…,vk,b} 使得这个点列中的每个点都是 S 里面的元素，且序列中相邻两个点间有一条边相连。

在这个前提下，上帝要使得 S 中的点所对应的整数的和尽量大。

这个最大的和就是上帝给生命之树的评分。

经过 atm 的努力，他已经知道了上帝给每棵树上每个节点上的整数。

但是由于 atm 不擅长计算，他不知道怎样有效的求评分。

他需要你为他写一个程序来计算一棵树的分数。

输入格式
第一行一个整数 n 表示这棵树有 n 个节点。

第二行 n 个整数，依次表示每个节点的评分。

接下来 n−1 行，每行 2 个整数 u,v，表示存在一条 u 到 v 的边。

由于这是一棵树，所以是不存在环的。

树的节点编号从 1 到 n。

输出格式
输出一行一个数，表示上帝给这棵树的分数。

数据范围
1≤n≤105,
每个节点的评分的绝对值均不超过 106。
*/

#include <cstdio>
#include <algorithm>

using namespace std;
typedef long long ll;
const int MAXN = 100005, INF = 1e9;

int head[MAXN], tot;

struct Edge{
	int u, to, next;
}G[MAXN<<1];

inline void addEdge(int u, int v){
	G[++tot].u = u;
	G[tot].to = v;
	G[tot].next = head[u];
	head[u] = tot;
}

ll n, val[MAXN], ans = -INF;

inline void DFS(int np, int fat){
	for(int i = head[np], to ; i ; i = G[i].next){
		to = G[i].to;
		if(to^fat){
			DFS(to,np);
			val[np] += max(val[to],0ll);
		}
	}
	ans = max(ans,val[np]);
}

int main(){
	scanf("%lld",&n);
	for(int i = 1 ; i <= n ; ++i) scanf("%lld",&val[i]);
	for(int i = 1, u, v ; i < n ; ++i){
		scanf("%d %d",&u,&v);
		addEdge(u,v);
		addEdge(v,u);
	}
	DFS(1,0);
	printf("%lld\n",ans);
	return 0;
}

/*
https://www.acwing.com/problem/content/1223/
四平方和定理，又称为拉格朗日定理：

每个正整数都可以表示为至多 4 个正整数的平方和。

如果把 0 包括进去，就正好可以表示为 4 个数的平方和。

比如：

5=02+02+12+22
7=12+12+12+22
对于一个给定的正整数，可能存在多种平方和的表示法。

要求你对 4 个数排序：

0≤a≤b≤c≤d
并对所有的可能表示法按 a,b,c,d 为联合主键升序排列，最后输出第一个表示法。

输入格式
输入一个正整数 N。

输出格式
输出4个非负整数，按从小到大排序，中间用空格分开。
*/

#include <cstdio>
#include <cmath>
#include <algorithm>
#define mp make_pair

using namespace std;

int n, top, sq[5000005];
pair<int,int> ans[5000005];
bool vis[5000005];

int main(){
	scanf("%d",&n);
	top = sqrt(n) + 1; // 2237
	for(int i = 0 ; i <= top ; ++i){
		for(int j = 0 ; j <= top ; ++j){
			if(!sq[j]) sq[j] = j * j;
			if(sq[i]+sq[j]>5e6) break;
			if(!vis[sq[i]+sq[j]]){
				vis[sq[i]+sq[j]] = true;
				ans[sq[i]+sq[j]] = mp(i,j);
			}
		}
	}
	for(int i = 0 ; i <= top ; ++i){
		for(int j = 0 ; sq[i] + sq[j] <= n ; ++j){
			if(vis[n-sq[i]-sq[j]]){
				printf("%d %d %d %d\n",i,j,ans[n-sq[i]-sq[j]].first,ans[n-sq[i]-sq[j]].second);
				return 0;
			}
		}
	}
	return 0;
} 