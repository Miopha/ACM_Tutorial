/*
https://www.luogu.com.cn/problem/P3355
*/

/*
 * 将点分成两个点集x,y,点集内的点不会互相攻击
 * x的点xx如果会攻击到y中的点yy，那么xx向yy连一条inf流边，这样保证了至少割s->xx，yy->t中的一条边
 * 将源点连到x，y连到汇点跑最大流
 */
 
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
#include <iostream>

using namespace std;
typedef long long ll;
const int MAXN = 200005, MAXM = 500005;
const ll INFL = 0x3f3f3f3f3f3f3f3f;

int head[MAXN], tot = 1;

struct Edge{
    int u, to, next;
    ll flow;
}G[MAXM];

inline void addEdge(int u, int v, ll w){
    G[++tot].u = u;
    G[tot].to = v;
    G[tot].flow = w;
    G[tot].next = head[u];
    head[u] = tot;
}

inline void addFlow(int u, int v, ll f = INFL){
	// printf("%d --%lld--%d\n",u,v,f);
    addEdge(u,v,f);
    addEdge(v,u,0);
}

int N, n, m, s, t, d[MAXN], dis[MAXN], now[MAXN], type[MAXN], obstacle[205][205], id[205][205];
int dx[8] = {1,1,-1,-1,2,2,-2,-2}, dy[8] = {2,-2,2,-2,1,-1,1,-1};
bool vis[MAXN];
ll mxFlow;

void BFS(int t, int s){
	int front = 1, rear = 1, q[MAXN];
	q[rear++] = t;
	++d[dis[t]=1];
	while(front<rear){
		int np = q[front++];
		for(int i = head[np], to ; i ; i = G[i].next){
			to = G[i].to;
			if(dis[to]) continue;
			q[rear++] = to;
			++d[dis[to]=dis[np]+1];
		}
	}
}

ll DFS(int np, ll flow){
	if(np==t) return flow;
	ll res = 0;
	for(int &i = now[np], to ; i ; i = G[i].next){
		to = G[i].to;
		if(G[i].flow&&dis[to]==dis[np]-1){
			ll k = DFS(to,min(flow-res,G[i].flow));
			if(k) G[i].flow -= k, G[i^1].flow += k, res += k;
			if(res==flow) return flow;
		}
	}
	(--d[dis[np]])?(++d[++dis[np]]):(dis[s]=N+1);
	return res;
}

void ISAP(int s, int t){
	BFS(t,s);
	while(dis[s]<=N){
		memcpy(now,head,sizeof(head));
		mxFlow += DFS(s,INFL);
	}
}

int main(){
	scanf("%d %d",&n,&m);
	t = n * n + 1;
	N = n * n + 2;
	for(int i = 1, x, y ; i <= m ; ++i){
		scanf("%d %d",&x,&y);
		obstacle[x][y] = true;
	}
	for(int i = 1 ; i <= n ; ++i){
		for(int j = 1 ; j <= n ; ++j){
			id[i][j] = (i-1)*n+j;
			if(obstacle[i][j]) continue;
			if((i&1)==(j&1)){
				addFlow(s,id[i][j],1);
				for(int k = 0, ax, ay ; k < 8 ; ++k){
					ax = i + dx[k];
					ay = j + dy[k];
					if(ax>=1&&ay>=1&&ax<=n&&ay<=n&&!obstacle[ax][ay]){
						addFlow(id[i][j],(ax-1)*n+ay);
					}
				}
			}
			else addFlow(id[i][j],t,1);
		}
	}
	ISAP(s,t);
	// printf("%lld\n",mxFlow);
	printf("%lld\n",n*n-m-mxFlow);
    return 0;
}

/*
https://www.luogu.com.cn/problem/P2766
*/

#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
#include <iostream>

using namespace std;
typedef long long ll;
const int MAXN = 200005, MAXM = 500005;
const ll INFL = 0x3f3f3f3f3f3f3f3f;

int head[MAXN], tot = 1;

struct Edge{
    int u, to, next;
    ll flow;
}G[MAXM];

inline void addEdge(int u, int v, ll w){
    G[++tot].u = u;
    G[tot].to = v;
    G[tot].flow = w;
    G[tot].next = head[u];
    head[u] = tot;
}

inline void addFlow(int u, int v, ll f = INFL){
	// printf("%d --%lld--> %d\n",u,f,v);
    addEdge(u,v,f);
    addEdge(v,u,0);
}

int n, m, s, t, d[MAXN], dis[MAXN], now[MAXN], a[MAXN], f[MAXN], ans;
ll mxFlow;

void BFS(int t, int s){
	int front = 1, rear = 1, q[MAXN];
	q[rear++] = t;
	++d[dis[t]=1];
	while(front<rear){
		int np = q[front++];
		for(int i = head[np], to ; i ; i = G[i].next){
			to = G[i].to;
			if(dis[to]) continue;
			q[rear++] = to;
			++d[dis[to]=dis[np]+1];
		}
	}
}

ll DFS(int np, ll flow){
	if(np==t) return flow;
	ll res = 0;
	for(int &i = now[np], to ; i ; i = G[i].next){
		to = G[i].to;
		if(G[i].flow&&dis[to]==dis[np]-1){
			ll k = DFS(to,min(flow-res,G[i].flow));
			if(k) G[i].flow -= k, G[i^1].flow += k, res += k;
			if(res==flow) return flow;
		}
	}
	(--d[dis[np]])?(++d[++dis[np]]):(dis[s]=n+n+3);
	return res;
}

void ISAP(int s, int t){
	BFS(t,s);
	while(dis[s]<=n+n+2){
		memcpy(now,head,sizeof(head));
		mxFlow += DFS(s,INFL);
	}
}

void ISAP_init(){
	tot = 1;
	mxFlow = 0;
	memset(d,0,sizeof(d));
	memset(dis,0,sizeof(dis));
	memset(head,0,sizeof(head));
}

int main(){
	scanf("%d",&n);
	t = n<<1|1;
	for(int i = 1 ; i <= n ; ++i) scanf("%d",&a[i]), f[i] = 1;
	
	for(int i = 1 ; i <= n ; ++i){
		int LIS[MAXN];
		LIS[f[i]=1]=a[i];
		for(int j = i + 1 ; j <= n ; ++j){
			if(a[j]>=LIS[f[i]]){
				LIS[++f[i]] = a[j];
			}else{
				int k;
				for(k = 1 ; k <= f[i] && LIS[k] <= a[j] ; ++k) ;
				if(LIS[k]>a[j]&&k!=1) LIS[k] = a[j];
			}
		}
	}
	printf("%d\n",ans=*max_element(f+1,f+1+n));
	for(int i = 1 ; i <= n ; ++i){
		addFlow(i,i+n,1);
		if(f[i]==ans) addFlow(s,i,1);
		if(f[i]==1) addFlow(i+n,t,1);
		for(int j = 1 ; j < i ; ++j){
			if(f[j]==f[i]+1&&a[i]>=a[j]) addFlow(j+n,i,1);
		}
	}
	ISAP(s,t);
	printf("%lld\n",mxFlow);
	if(ans==1){
		printf("%d\n",n);
		return 0;
	}
	ISAP_init();
	for(int i = 1 ; i <= n ; ++i){
		if(i==1||i==n) addFlow(i,i+n);
		else addFlow(i,i+n,1);
		if(f[i]==ans){
			if(i==1||i==n) addFlow(s,i);
			else addFlow(s,i,1);
		}
		if(f[i]==1){
			if(i==n) addFlow(i+n,t);
			addFlow(i+n,t,1);
		}
		for(int j = i + 1 ; j <= n ; ++j){
			if(f[j]==f[i]-1&&a[i]<=a[j]) addFlow(i+n,j,1);
		}
	}
	ISAP(s,t);
	printf("%lld\n",mxFlow);
    return 0;
}

/*
https://ac.nowcoder.com/acm/contest/26077/1006
*/

#include <cstdio>
#include <queue>
#include <algorithm>

using namespace std;
typedef long long ll;
typedef pair<ll,int> p;
const int MAXN = 100005<<2;
const ll INFL = 0x3f3f3f3f3f3f3f3f;

int head[MAXN], tot;

inline int read(){
	int x = 0, f = 1;
	char ch = getchar();
	while(ch<'0'||ch>'9'){
		if(ch=='-')
			f = -1;
		ch = getchar();
	}
	while(ch>='0'&&ch<='9'){
		x=(x<<1)+(x<<3)+(ch^48);
		ch = getchar();
	}
	return x*f;
}

struct Edge{
	int to, next, val;
}G[10000005];

void addEdge(int u, int v, int w){
	G[++tot].to = v;
	G[tot].next = head[u];
	G[tot].val = w;
	head[u] = tot;
}
	
int n, m, upper = 1, c, s, t;
ll dis[MAXN];
bool vis[MAXN];
priority_queue<p,vector<p>,greater<p> > pq;

void dijkstra(int s){
	for(int i = 1 ; i <= upper ; ++i) dis[i] = INFL;
	pq.push({dis[s]=0,s});
	while(!pq.empty()){
		int np = pq.top().second; pq.pop();
		if(vis[np]) continue;
		vis[np] = true;
		for(int i = head[np], to ; i ; i = G[i].next){
			to = G[i].to;
			if(!vis[to]&&dis[to]>dis[np]+G[i].val){
				dis[to] = dis[np]+G[i].val;
				pq.push({dis[to],to}); 
			}
		}
	}
}

int main(){
	n = read();
	m = read();
	c = read();
	for(int i = 1, u, v, w ; i <= m ; ++i){
		u = read();
		v = read();
		w = read();
		addEdge(u,v,w);
	}
	while(upper<=n) upper<<=1;
	--upper;
	for(int i = 1 ; i <= n ; ++i){
		for(int j = 1 ; j <= upper ; j <<= 1){
			if((i|j)!=i){
				addEdge(i,i|j,j*c);
				addEdge(i|j,i,j*c);
			}
		}
	}
	s = read();
	t = read();
	dijkstra(s);
	printf("%lld\n",dis[t]);
	return 0;
}

/*
https://ac.nowcoder.com/acm/contest/26077/1001
*/

#include <cstdio>
#include <queue>

using namespace std;
const int MAXN = 1e5 + 5;

int head[MAXN], tot;

struct Edge{
	int to, next, val;
}G[MAXN<<1];

void addEdge(int u, int v, int val){
	G[++tot].to = v;
	G[tot].next = head[u];
	G[tot].val = val;
	head[u] = tot;
}
	
int n, m, u[MAXN], c[MAXN], in[MAXN], out[MAXN];
bool ans[MAXN];
queue<int> q;

int main(){
	scanf("%d %d",&n,&m);
	for(int i = 1 ; i <= n ; ++i) scanf("%d %d",&c[i],&u[i]);
	for(int i = 1, u, v, w ; i <= m ; ++i){
		scanf("%d %d %d",&u,&v,&w);
		addEdge(u,v,w);
		++out[u];
		++in[v];
	}
	for(int i = 1 ; i <= n ; ++i){
		if(!out[i]) ans[i] = true;
		if(!in[i]) q.push(i);
	}
	while(!q.empty()){
		int np = q.front(); q.pop();
		for(int i = head[np], to ; i ; i = G[i].next){
			to = G[i].to;
			--in[to];
			if(c[np]>0)
				c[to] += c[np]*G[i].val;
			if(!in[to]){
				c[to] -= u[to];
				q.push(to);
			}
		}
	}
	bool flag = false;
	for(int i = 1 ; i <= n ; ++i){
		if(ans[i]&&c[i]>0){
			printf("%d %d\n",i,c[i]);
			flag = true;
		}
	}
	if(!flag) puts("NULL");
	
	return 0;
}