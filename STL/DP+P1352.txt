/*
https://www.luogu.com.cn/problem/P1352
题目描述
某大学有 n 个职员，编号为 1…n。

他们之间有从属关系，也就是说他们的关系就像一棵以校长为根的树，父结点就是子结点的直接上司。

现在有个周年庆宴会，宴会每邀请来一个职员都会增加一定的快乐指数 ri ，但是呢，如果某个职员的直接上司来参加舞会了，那么这个职员就无论如何也不肯来参加舞会了。

所以，请你编程计算，邀请哪些职员可以使快乐指数最大，求最大的快乐指数。

输入格式
输入的第一行是一个整数 n。

第 2 到第 (n + 1) 行，每行一个整数，第 (i+1) 行的整数表示 i 号职员的快乐指数 ri

第 (n + 2) 到第 (2n + 1) 行，每行输入一对整数 l, k，代表 k 是 l 的直接上司。
*/

/*
 * 树形DP,为了从上到下一次性搜索完整棵树,从根节点开始DFS
 * DP放在DFS递归的后面就可以使DP从树的深处开始走
 * 对于每一个节点,分成选(0)不选(1)的状态,如果选:那么他的子节点必然不选,故dp[cur][1]+=dp[aft][0],如果不选:那么他的子节点有可能不选有可能选,取得到最大值的情况dp[cur][0]+=Math.max(dp[aft][1],dp[aft][0])
 */


//package P1352;

import java.io.*;
import java.util.*;

public class Main {
	
	static int n, v[], dp[][];
	static boolean vis[];
	static ArrayList<Integer> node[];

	public static void main(String[] args) throws IOException {
		StreamTokenizer st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
		st.nextToken(); n = (int)st.nval;
		init();
		for(int i = 1 ; i <= n ; i++) {
			st.nextToken(); v[i] = (int)st.nval;
		}
		int x, y;
		for(int i = 1 ; i < n ; i++) {
			st.nextToken(); x = (int)st.nval;
			st.nextToken(); y = (int)st.nval;
			node[y].add(x);
			vis[x] = true;
		}
		int root = 1;
		for(int i = 2 ; i <= n ; i++)
			if(!vis[i]) {
				root = i;
				break;
			}
		DFS(root);
		System.out.println(Math.max(dp[root][0],dp[root][1]));
	}
	
	public static void init() {
		dp = new int[n+1][2];
		vis = new boolean[n+1];
		v = new int[n+1];
		node = new ArrayList[n+1];
		for(int i = 1 ; i <= n ; i++)
			node[i] = new ArrayList<Integer>();
	}
	
	public static void DFS(int cur) {
		dp[cur][0] = 0;
		dp[cur][1] = v[cur];
		for(int i = 0 ; i < node[cur].size() ; i++) {
			int aft = node[cur].get(i);
			DFS(aft);
			dp[cur][0]+=Math.max(dp[aft][0],dp[aft][1]);
			dp[cur][1]+=dp[aft][0];
		}
	}

}
