/*
题目背景:
从前，有一个很强的小朋友叫做LiM，小学奥术课上，老师给她留了一道求二元一次不定方程的解的题。她想了半天都不会做，于是请教了已经熟练掌握exgcd 的您。

如果您熟练地解决了这道题，那么LiM 会萌萌地跟您说“为什么你会这么熟...

题目描述:
给定不定方程

ax+by=c

若该方程无整数解，输出 -1
若该方程有整数解，且有正整数解，则输出其正整数解的数量，所有正整数解中 x 的最小值，所有正整数解中 yy 的最小值，所有正整数解中 x 的最大值，以及所有正整数解中 y 的最大值
若方程有整数解，但没有正整数解，你需要输出所有整数解中 x 的最小正整数值， y 的最小正整数值

正整数解即为 x,y 均为正整数的解， 0 不是正整数
整数解即为 x,y 均为整数的解
x 的最小正整数值即所有 x 为正整数的整数解中 x 的最小值，y 同理

输入格式:
第一行一个正整数 T，代表数据组数

接下来 T 行，三个由空格隔开的正整数 a,b,c

输出格式:
T 行

若该行对应的询问无整数解，一个数字 -1
若该行对应的询问有整数解但无正整数解，包含 2 个由空格隔开的数字，依次代表整数解中，x 的最小正整数值，y 的最小正整数值
否则包含 5 个由空格隔开的数字，依次代表正整数解的数量，正整数解中，x 的最小值，y 的最小值，x 的最大值，y 的最大值
数据范围:
对于100%的数据，1<=T<=2x10^5,1<=a,b,c<=10^9
*/

#include <iostream>
#include <math.h>
#include <stdio.h>
#define ll long long

using namespace std;

ll gcd(ll a, ll b){
	if(!b)return a;
	else return gcd(b,a%b);
}

void exgcd(ll a , ll b , ll& x, ll& y){
    if(!b){x=1;y=0;}
    else{exgcd(b,a%b,y,x);y-=x*(a/b);}
}

int main(){
    ll t , a , b , c , d , x , y, minx , miny , maxx, maxy , num;
    cin>>t;
    while(t--){
        scanf("%lld%lld%lld",&a,&b,&c);
        d = gcd(a,b);
		//不满足gcd(a,b) | c 时方程无解
        if(c%d){
            printf("-1\n");
            continue;
        }
        a/=d;b/=d;c/=d;
		//求ax+by=1的一组解
        exgcd(a,b,x,y);
		//ax+by=c的一组解
        x*=c;y*=c;
        //通式x=x0+kb,y=y0-ka
		//求x最小值
        minx = (x % b + b) % b;
		//x==b时
        if(!minx) minx = b;
		//求y最小值
        miny = (y % a + a) % a;
		//y==a时
        if(!miny) miny = a;
		//y最小时x最大
        maxx=(c-b*miny)/a;
		//x最小时y最大
        maxy=(c-a*minx)/b;
		//解的个数
        num=(maxy-miny)/a+1;
		
        if(num)printf("%lld %lld %lld %lld %lld\n",num,minx,miny,maxx,maxy);
        else printf("%lld %lld\n",minx,miny);
    }
    return 0;
}
