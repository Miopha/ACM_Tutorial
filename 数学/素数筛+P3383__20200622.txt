/*
题目背景
本题已更新，从判断素数改为了查询第 k 小的素数
提示：如果你使用 cin 来读入，建议使用 std::ios::sync_with_stdio(0) 来加速。

题目描述
如题，给定一个范围 n，有 q 个询问，每次输出第 k 小的素数。

输入格式
第一行包含两个正整数 n,q，分别表示查询的范围和查询的个数。

接下来 q 行每行一个正整数 k，表示查询第 k 小的素数。

输出格式
输出 q 行，每行一个正整数表示答案。
*/

/*
 * 对于求n内的所有素数集合,我们有三种算法：
 * 1.暴力枚举求素数O(n*root(n)):对于每个数i,枚举2~root(i)的数,判断是否有正整数能整除这个数字
 * 2.埃式筛法O(nlogn):"素数与大于等于2的数的乘积必定是合数",那么我们找到一个素数i时就把枚举j与这个素数相乘,直到>n,把它的倍数标记成合数
 * 3.线性筛法O(n):"每一个合数都可以以唯一形式被写成质数的乘积",2中算法合数可能被不必要地标记多次,3算法中把i和之前发现的素数primes[j]的乘积标记为合数,那么没有被标记的就是质数,记得加退出条件if(i%primes[j]==0)break;
 */
 
//package P3383;

import java.util.*;
import java.io.*;

public class Main {

	public static void main(String[] args) {
		int n = cin.nextInt() , q = cin.nextInt() , cnt = 0 , tmp;
		boolean isNotPrime[] = new boolean[n+1];
		int primes[] = new int[n+1];
		for(int i = 2 ; i <= n ; i++) {
			if(!isNotPrime[i])
				primes[++cnt]=i;
			tmp = i * primes[1];
			for(int j = 1 ; j <= cnt && tmp <= n ;) {
				isNotPrime[tmp]=true;
				if(i%primes[j]==0)break;
				tmp=primes[++j]*i;
			}
		}
		
		while(q-->0)
			out.println(primes[cin.nextInt()]);
		
		out.flush();
		
			
	}

	static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
	static FastScanner cin = new FastScanner(System.in);
	static class FastScanner{
		BufferedReader br;
		StringTokenizer st;
		public FastScanner(InputStream in) {
			br = new BufferedReader(new InputStreamReader(in),16384);
			st = new StringTokenizer("");
		}
		public String nextLine() {
			try {
				return br.readLine();
			} catch (IOException e) {
				return null;
			}
		}
		public boolean hasNext() {
			while(!st.hasMoreTokens()) {
				String s = nextLine();
				if(s==null) return false;
				st = new StringTokenizer(s);
			}
			return true;
		}
		public String next() {
			hasNext();
			return st.nextToken();
		}
		public int nextInt() {
			return Integer.parseInt(next());
		}
	}
}
