/*
https://codeforces.com/problemset/problem/466/C
C. Number of Ways
time limit per test2 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
You've got array a[1], a[2], ..., a[n], consisting of n integers. Count the number of ways to split all the elements of the array into three contiguous parts so that the sum of elements in each part is the same.

More formally, you need to find the number of such pairs of indices i, j (2 ≤ i ≤ j ≤ n - 1), that .

Input
The first line contains integer n (1 ≤ n ≤ 5·105), showing how many numbers are in the array. The second line contains n integers a[1], a[2], ..., a[n] (|a[i]| ≤  109) — the elements of array a.

Output
Print a single integer — the number of ways to split the array into three parts with the same sum.
*/

//package CF466C;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;

public class Main {

	static int n, arr[];
	static long ans, prefix[];
	
	public static void main(String[] args) throws IOException {
		n = nextInt();
		arr = new int[n+1];
		prefix = new long[n+1];
		for(int i = 1 ; i <= n ; ++i) {
			arr[i] = nextInt();
			prefix[i] = prefix[i-1] + arr[i];
		}
		if(prefix[n]%3!=0||n<3) {
			out.println("0");
			out.flush();
			return ;
		}
		for(int i = 1, tmp = 0 ; i <= n ; ++i) {
			if(prefix[i]==(prefix[n]<<1)/3 && i<n) ans += tmp;
			if(prefix[i]==prefix[n]/3 && i<n-1) {
				++tmp;
			}
		}
		out.println(ans);
		out.flush();
	}

	static StringBuilder print = new StringBuilder();
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StreamTokenizer st = new StreamTokenizer(br);
	static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
	public static int nextInt() throws IOException {
		st.nextToken();
		return (int)st.nval;
	}
	
}