/*
题目描述
已知n盏灯以及每盏灯的位置p[i]，p[i]均不相等，两盏相邻的灯当小于dist时，若这个安全距离里面还有灯是亮着时，就可以关掉该盏灯，(即若第i-1盏-第i+1盏的距离<=dist，则可以关掉第i盏)求在保证洞里的光线是充足的情况下，一段区域里能删除的灯的最大值。
距离洞口最近和最远的两盏灯必须是亮着。
输入格式
第一行两个数，n和dist
第二行n个数，即每盏灯的位置
输出格式
一个数，即一段区域里能删除的灯的最大值。
*/

/*
 * 先排序。
 * 如果第i-1盏-第i+1盏的距离<=dist的话就删掉这盏灯，因为删掉了再让前面一盏灯的坐标覆盖删掉那盏灯的坐标。
 */
 
//package P1610;

import java.util.*;
import java.io.*;

public class Main {
	
	static FastScanner cin = new FastScanner(System.in);
	public static void main(String[] args) {
		int n = cin.nextInt() , dist = cin.nextInt() , ans = 0;
		int[] nums = new int[n+1];
		for(int i = 1 ; i <= n ; i++)nums[i] = cin.nextInt();
		Arrays.sort(nums);
		for(int i = 2 ; i < n ; i++) 
			if(nums[i+1]-nums[i-1]<=dist) {
				ans++;
				nums[i]=nums[i-1];
			}
		System.out.println(ans);
	}
	
	static class FastScanner{
		BufferedReader br ;
		StringTokenizer st;
		public FastScanner(InputStream in) {
			br = new BufferedReader(new InputStreamReader(in),16384);
			st = new StringTokenizer("");
		}
		public String nextLine() {
			try {
				return br.readLine();
			}catch(Exception e) {
				return null;
			}
		}
		public boolean hasNext() {
			while(!st.hasMoreTokens()) {
				String s = nextLine();
				if(s==null) return false;
				st = new StringTokenizer(s);
			}
			return true;
		}
		public String next() {
			hasNext();
			return st.nextToken();
		}
		public int nextInt() {
			hasNext();
			return Integer.parseInt(next());
		}
	}

}