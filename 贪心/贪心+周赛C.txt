
httpsvjudge.netcontest417209#problemC
Rookie Bunny is helping the motor vehicle department to renew licenses for its customers. She works at the ticket machine and gives tickets to customers to tell them at which counters they will be served. There are two counters providing service in the office today. The two counters will be open for at most s1 and s2 minutes respectively.

There are n customers waiting in a line in front of the ticket machine. Every customer can be served at either counter. The jth customer needs tj minutes at a counter. If neither counter has tj minutes till its closing time, then the customer has to leave and come back tomorrow. Besides, all customers in the line behind the jth customer have to leave to respect the order of the line and avoid customer complaints.

Rookie Bunny may assign each customer in the line to either counter of her choice. She would like to maximize the number of customers that can be served today.

Input
The first line has three positive integers n, s1, and s2 (n≤1000,s1⋅s2≤107). The second line has n integers. The jth integer is tj (1≤tj≤106).

Output
Output the maximum number of customers that can be served today.



  枚举答案，再对小的容量进行01背包，如果小的s最多能装下dp[s]，那么剩下的prefix[ans]-dp[s]就一定要由另一个背包装(prefix是前缀和)
  如果单纯枚举时间复杂度O(nns); 100010003000会超时
  选择二分答案可以O(lognns)
 

#include cstdio
#include cmath
#include iostream

using namespace std;

const int MAXN = 1005;

inline int read(){
	int x = 0, f = 1;
	char ch = getchar();
	while(ch'0'ch'9'){
		if(ch=='-')
			f = -1;
		ch = getchar();
	}
	while(ch='0'&&ch='9'){
		x=(x1)+(x3)+(ch^48);
		ch = getchar();
	}
	return xf;
}

int n, s1, s2, prefix[MAXN], a[MAXN], mx[MAXN];

bool check(int x){
	if(prefix[x]s1+s2mx[x]max(s1,s2)) return false;
	int cap = min(s1,s2), dp[cap+5];
	for(int i = 0 ; i = cap ; ++i) dp[i] = 0;
	
	for(int i = 1 ; i = x ; ++i){
		for(int j = cap ; j = a[i] ; --j){
			dp[j] = max(dp[j],dp[j-a[i]]+a[i]);
		}
	}
	
	int left = prefix[x] - dp[cap], empty = s1 + s2 - cap;
	if(emptyleft) return false;
	return true;
}

int main(){
	n =  read();
	s1 = read();
	s2 = read();
	for(int i = 1 ; i = n ; ++i){
		a[i] = read();
		prefix[i] = prefix[i-1] + a[i];
		mx[i] = max(mx[i-1],a[i]);
	}
	int l = 0, r = n;
	while(l=r){
		int mid = (l+r)1;
		 printf(l=%d r=%d mid=%d n=%dn,l,r,mid,n);
		if(check(mid)){
			l = mid + 1;
		}else{
			r = mid - 1;
		}
		 printf(l=%d r=%d n = %dn,l,r,n);
	}
	printf(%dn,r);
	return 0;
}
