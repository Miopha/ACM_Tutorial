/*
https://codeforces.com/contest/1512/problem/F
F. Education
time limit per test2 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
Polycarp is wondering about buying a new computer, which costs c tugriks. To do this, he wants to get a job as a programmer in a big company.

There are n positions in Polycarp's company, numbered starting from one. An employee in position i earns a[i] tugriks every day. The higher the position number, the more tugriks the employee receives. Initially, Polycarp gets a position with the number 1 and has 0 tugriks.

Each day Polycarp can do one of two things:

If Polycarp is in the position of x, then he can earn a[x] tugriks.
If Polycarp is in the position of x (x<n) and has at least b[x] tugriks, then he can spend b[x] tugriks on an online course and move to the position x+1.
For example, if n=4, c=15, a=[1,3,10,11], b=[1,2,7], then Polycarp can act like this:

On the first day, Polycarp is in the 1-st position and earns 1 tugrik. Now he has 1 tugrik;
On the second day, Polycarp is in the 1-st position and move to the 2-nd position. Now he has 0 tugriks;
On the third day, Polycarp is in the 2-nd position and earns 3 tugriks. Now he has 3 tugriks;
On the fourth day, Polycarp is in the 2-nd position and is transferred to the 3-rd position. Now he has 1 tugriks;
On the fifth day, Polycarp is in the 3-rd position and earns 10 tugriks. Now he has 11 tugriks;
On the sixth day, Polycarp is in the 3-rd position and earns 10 tugriks. Now he has 21 tugriks;
Six days later, Polycarp can buy himself a new computer.
Find the minimum number of days after which Polycarp will be able to buy himself a new computer.

Input
The first line contains a single integer t (1≤t≤104). Then t test cases follow.

The first line of each test case contains two integers n and c (2≤n≤2⋅105, 1≤c≤109) — the number of positions in the company and the cost of a new computer.

The second line of each test case contains n integers a1≤a2≤…≤an (1≤ai≤109).

The third line of each test case contains n−1 integer b1,b2,…,bn−1 (1≤bi≤109).

It is guaranteed that the sum of n over all test cases does not exceed 2⋅105.

Output
For each test case, output the minimum number of days after which Polycarp will be able to buy a new computer.
*/

#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
#include <cstring>
#include <algorithm>
#include <cmath>
#define CHECK(x) cout << (#x) << " is " << (x) << endl;
#define pb push_back
#define cl clear
#define mp make_pair

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> P;
const int INF = 1e9;
const int MAXN = 200005;

inline int read(){
	int x = 0, f = 1;
	char ch = getchar();
	while(ch<'0'||ch>'9'){
		if(ch=='-')
			f = -1;
		ch = getchar();
	}
	while(ch>='0'&&ch<='9'){
		x=(x<<1)+(x<<3)+(ch^48);
		ch = getchar();
	}
	return x*f;
}

ll n, c, a[MAXN], b[MAXN], d[MAXN], l[MAXN], ans;

void solve(){
	n = read();
	c = read();
	for(int i = 1 ; i <= n ; ++i) a[i] = read();
	for(int i = 1 ; i < n ; ++i) b[i] = read();
	ans = c/a[1]+!!(c%a[1]);
	for(int i = 2 ; i <= n ; ++i){
		int need = b[i-1] - l[i-1];
		int upDay = need/a[i-1] + !!(need%a[i-1]);
		l[i] = 1ll * upDay * a[i-1] + l[i-1];
		l[i] -= b[i-1];
		d[i] = d[i-1] + 1 + upDay;
		if(need<=0){
			l[i] = l[i-1] - b[i-1];
			d[i] = d[i-1] + 1;
		}
		ll nwAns = d[i] + (c-l[i])/a[i]+!!((c-l[i])%a[i]);
		ans = min(ans,nwAns);
	}
	cout<<ans<<endl;
}

int main(){
    int t = 1;
    t = read();
    while(t--) solve();
    return 0;
}
