/*
https://www.luogu.com.cn/record/36254698
题目描述
有两个长度都是N的序列A和B，在A和B中各取一个数相加可以得到N^2个和，求这N^2 个和中最小的N个。有两个长度都是N的序列A和B，在A和B中各取一个数相加可以得到N^2个和，求这N^2 个和中最小的N个。
输入格式
第一行一个正整数N;
第二行N个整数Ai,满足Ai<=Ai+1且Ai<=10^9;
第三行N个整数Bi,满足Bi<=Bi+1且Bi<=10^9;
【数据规模】
对于50%的数据中，满足1<=N<=1000；
对于100%的数据中，满足1<=N<=100000。
输出格式
输出仅一行，包含N个整数，从小到大输出这N个最小的和，相邻数字之间用空格隔开。
输入 #1
3
2 6 6
1 4 8
输出 #1
3 6 7
*/

/*
 * 用每一个a[i]与b[i]相加,得到(a1+b1,a1+b2,...,a1+bn),(a2+b1,a2+b2,...,a2+bn),...,(an+b1,an+b2,...,an+bn),
 * 因为a和b序列是按升序排序好的,所以一开始的最小值从第一个序列中产生
 * 用优先队列可以方便地弹出最小值,弹出之后要向优先队列中加入下一个序列中的a[i]+b[i],以此类推
 * 所以优先队列存储的是一个pair<int,int>,用于存储两个数之和和a序列中的下标
 */
 
#include <bits/stdc++.h>
#define MAXN 100005
#define re register

using namespace std;

inline int read(){
	int x = 0 , f = 1;
	char ch = getchar();
	while(ch<'0'||ch>'9'){
		if(ch=='-')
			f = -1;
		ch = getchar();
    }
    while(ch>='0'&&ch<='9'){
		x=(x<<1)+(x<<3)+(ch^48);
		ch = getchar();
    }
    return x*f;
}

//num, idx
typedef pair<int,int> PII;
int n, a[MAXN], b[MAXN], c[MAXN];
priority_queue<PII,vector<PII>,greater<PII>> heap;

int main(){
    n = read();
    for(re int i = 1 ; i <= n ; ++i){
		a[i] = read();
	}
    for(re int i = 1 ; i <= n ; ++i){
        b[i] = read();
        heap.push({a[1]+b[i],1});
    }
    for(re int i = 1 ; i <= n ; ++i){
        auto t = heap.top(); heap.pop();
        heap.push({t.first-a[t.second]+a[t.second+1],t.second+1});
        c[i] = t.first;
    }
	for(re int i = 1 ; i <= n ; ++i){
		printf("%d ",c[i]);
	}
    return 0;
}