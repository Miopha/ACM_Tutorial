/*
题目描述
Y 岛风景美丽宜人，气候温和，物产丰富。Y 岛上有 N 个城市，有 N-1  条城市间的道路连接着它们。每一条道路都连接某两个城市。幸运的是，小可可通过这些道路可以走遍 Y 岛的所有城市。神奇的是，乘车经过每条道路所需要的费用都是一样的。

小可可，小卡卡和小 YY 经常想聚会，每次聚会，他们都会选择一个城市，使得三个人到达这个城市的总费用最小。

由于他们计划中还会有很多次聚会，每次都选择一个地点是很烦人的事情，所以他们决定把这件事情交给你来完成。他们会提供给你地图以及若干次聚会前他们所处的位置，希望你为他们的每一次聚会选择一个合适的地点。

输入格式
第一行两个正整数，N和M。分别表示城市个数和聚会次数；

后面有 N-1 行，每行用两个正整数 A 和 B 表示编号为 A 和编号为 B 的城市之间有一条路。城市的编号是从 1 到 N 的；

再后面有 M 行，每行用三个正整数表示一次聚会的情况：小可可所在的城市编号x，小卡卡所在的城市编号y以及小 YY 所在的城市编号z。

输出格式
一共有 M 行，每行两个数 P 和 C ，用一个空格隔开。表示第 i 次聚会的地点选择在编号为 P 的城市，总共的费用是经过 C 条道路所花费的费用。
*/

/*
 * 用倍增求出x和y,y和z,x和z的LCA,必定有两个LCA相同,另一个LCA就是P
 * C=三个点的深度的和-三个LCA的和
 */
 
#include <bits/stdc++.h>
#define maxn 500005

using namespace std;

inline int read(){
    int x = 0, f = 1;
    char ch = getchar();
    while(ch<'0'||ch>'9'){
        if(ch=='-')
            f = -1;
        ch = getchar();
    }
    while(ch>='0'&&ch<='9'){
        x = (x<<1)+(x<<3)+(ch^48);
        ch = getchar();
    }
    return x*f;
}

int n, m, depth[maxn], f[maxn][21], lg2[maxn];
vector<int> node[maxn];

void swap(int *a, int *b){
    int tmp = *a;
    *a = *b;
    *b = tmp;
}

void init(){
    memset(depth,0,sizeof(depth));
    for(register int i = 1 ; i <= n ; i++)
        memset(f[i],0,sizeof(f[i]));
    lg2[0] = lg2[1] = 0;
    for(register int i = 2 ; i <= n ; i++)
        lg2[i] = lg2[i-1] + (1<<(lg2[i-1]+1)==i);
}

void DFS(int cur, int father){
    depth[cur] = depth[father] + 1;
    f[cur][0] = father;
    for(register int i = 1 ; i <= lg2[depth[cur]] ; i++)
        f[cur][i] = f[f[cur][i-1]][i-1];

    for(register int i = 0 ; i < node[cur].size() ; i++){
        if(node[cur][i]!=father)
            DFS(node[cur][i],cur);
    }
}

int LCA(int x, int y){
    if(depth[x]<depth[y])
        swap(&x,&y);
    for(register int i = 20 ; i >= 0 ; i--)
        if(depth[y]<=depth[f[x][i]]){
            x = f[x][i];
        }
    if(x==y) return x;
    for(register int i = 20 ; i >= 0 ; i--){
        if(f[x][i]!=f[y][i]){
            x = f[x][i];
            y = f[y][i];
        }
    }
    return f[x][0];
}

int main(){
    n = read(); m = read();
    int x, y, z;
    for(int i = 1 ; i < n ; i++){
        x = read(); y = read();
        node[x].push_back(y);
        node[y].push_back(x);
    }
	
    init();
    DFS(1,0);

    for(int i = 1 ; i <= m ; i++){
        x = read(); y = read(); z = read();
        int r1 = LCA(x,y);
        int r2 = LCA(x,z);
        int r3 = LCA(y,z);
        int ans = depth[x] + depth[y] + depth[z] - depth[r1] - depth[r2] - depth[r3];
        if(r1==r2){
            printf("%d ",r3);
        }else if(r1==r3){
            printf("%d ",r2);
        }else if(r2==r3){
            printf("%d ",r1);
        }
        printf("%d\n",ans);
    }
    return 0;
}
