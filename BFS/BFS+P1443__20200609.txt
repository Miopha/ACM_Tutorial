/*
题目描述
有一个n*m的棋盘(1<n,m<=400)，在某个点上有一个马,要求你计算出马到达棋盘上任意一个点最少要走几步

输入格式
一行四个数据，棋盘的大小和马的坐标

输出格式
一个n*m的矩阵，代表马到达某个点最少要走几步（左对齐，宽5格，不能到达则输出-1）
*/

//package P1443;

import java.util.*;
import java.io.*;

public class Main {
	
	static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
	static FastScanner cin = new FastScanner(System.in);
	static int n , m , maxn = 405;
	static int[][] step = new int[maxn][maxn] , dir = {{2,1},{-2,1},{2,-1},{-2,-1},{1,2},{-1,2},{1,-2},{-1,-2}};
	static Warp s;
	static LinkedList<Warp> q=new LinkedList<Warp>();

	public static void main(String[] args) {
		n=cin.nextInt() ; m = cin.nextInt() ; s = new Warp(cin.nextInt(),cin.nextInt());
		bfs(s);
		printArray(step);
	}
	
	public static void printArray(int[][] step) {
		for(int i = 1 ; i <= n ; i++) {
			for(int j = 1 ; j <= m ; j++)
				out.print(String.format("%-5d",step[i][j]-1));
			out.println();
			out.flush();
		}
				
	}
	
	public static void bfs(Warp s) {
		q.add(s);
		step[s.x][s.y] = 1;
		while(!q.isEmpty()) {
			Warp cur = q.pollFirst();
			for(int i = 0 ; i < 8 ; i++) {
				Warp aft = new Warp(cur.x+dir[i][0],cur.y+dir[i][1]);
				if(aft.x<=0||aft.y<=0||aft.x>n||aft.y>m||step[aft.x][aft.y]!=0) continue;
				step[aft.x][aft.y] = step[cur.x][cur.y] + 1;
				q.add(aft);
			}
		}
		
	}
	
	static class FastScanner{
		BufferedReader br;
		StringTokenizer st;
		public FastScanner(InputStream in) {
			br = new BufferedReader(new InputStreamReader(in),16384);
			st = new StringTokenizer("");
		}
		public String nextLine() {
			try {
				return br.readLine();
			} catch (IOException e) {
				return null;
			}
		}
		public boolean hasNext() {
			while(!st.hasMoreTokens()) {
				String s = nextLine();
				if(s==null) return false;
				st = new StringTokenizer(s);
			}
			return true;
		}
		public String next() {
			hasNext();
			return st.nextToken();
		}
		public int nextInt() {
			return Integer.parseInt(next());
		}
	}

}

class Warp{
	int x , y;
	public Warp(int a , int b) {
		x = a ; y = b;
	}
}
