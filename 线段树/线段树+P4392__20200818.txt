/*
https://www.luogu.com.cn/record/37224248
题目描述
数字录音中，声音是用表示空气压力的数字序列描述的，序列中的每个值称为一个采样，每个采样之间间隔一定的时间。

很多声音处理任务都需要将录到的声音分成由静音隔开的几段非静音段。为了避免分成过多或者过少的非静音段，静音通常是这样定义的：m个采样的序列，该序列中采样的最大值和最小值之差不超过一个特定的阈值c。

请你写一个程序，检测n个采样中的静音。

输入格式
第一行有三个整数n，m，c（ 1<= n<=1000000，1<=m<=10000， 0<=c<=10000），分别表示总的采样数、静音的长度和静音中允许的最大噪音程度。

第2行n个整数ai (0 <= ai <= 1,000,000)，表示声音的每个采样值，每两个整数之间用空格隔开。

输出格式
列出了所有静音的起始位置i（i满足max(a[i, . . . , i+m−1]) − min(a[i, . . . , i+m−1]) <= c），每行表示一段静音的起始位置，按照出现的先后顺序输出。如果没有静音则输出NONE。
*/

/*
 * 线段树维护区间最大值和最小值
 */
 
#include <iostream>
#include <cstdio>
#define re register
#define MAXN 1000005

using namespace std;
typedef long long ll;

inline int read(){
	int x = 0 , f = 1;
	char ch = getchar();
	while(ch<'0'||ch>'9'){
		if(ch=='-')
			f = -1;
		ch = getchar();
    }
    while(ch>='0'&&ch<='9'){
		x=(x<<1)+(x<<3)+(ch^48);
		ch = getchar();
    }
    return x*f;
}

int n, m, c, data[MAXN], maxTree[MAXN<<2], minTree[MAXN<<2], mx, mn;
bool flag;

inline void build(int node, int L, int R){
    if(L==R){
        minTree[node] = maxTree[node] = data[L];
        return ;
    }
    int left_node = node<<1, right_node = node<<1|1, mid = (L+R)>>1;
    build(left_node,L,mid);
    build(right_node,mid+1,R);
    maxTree[node] = max(maxTree[left_node],maxTree[right_node]);
    minTree[node] = min(minTree[left_node],minTree[right_node]);
}

inline void query(int node, int L, int R, int start, int end){
    if(R<start||L>end)
        return ;
    if(start<=L&&end>=R){
        mx = max(mx,maxTree[node]);
        mn = min(mn,minTree[node]);
        return ;
    }
    int left_node = node<<1, right_node = node<<1|1, mid = (L+R)>>1;
    query(left_node,L,mid,start,end);
    query(right_node,mid+1,R,start,end);
}

int main(){
    n = read(); m = read(); c = read();
    for(re int i = 1 ; i <= n ; ++i)
        data[i] = read();
    build(1,1,n);
    int border = n - m + 1;
    for(re int i = 1 ; i <= border ; ++i){
        mx = 0x80000000; mn = 0x7fffffff;
        query(1,1,n,i,i+m-1);
        //printf("mx=%d mn=%d\n",mx,mn);
        if(mx-mn<=c){
            printf("%lld\n",i);
            flag = true;
        }
    }
    if(!flag){
        printf("NONE\n");
    }
    return 0;
}