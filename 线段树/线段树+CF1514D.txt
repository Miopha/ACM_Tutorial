/*
https://codeforces.com/contest/1514/problem/D
D. Cut and Stick
time limit per test3 seconds
memory limit per test512 megabytes
inputstandard input
outputstandard output
Baby Ehab has a piece of Cut and Stick with an array a of length n written on it. He plans to grab a pair of scissors and do the following to it:

pick a range (l,r) and cut out every element al, al+1, ..., ar in this range;
stick some of the elements together in the same order they were in the array;
end up with multiple pieces, where every piece contains some of the elements and every element belongs to some piece.
More formally, he partitions the sequence al, al+1, ..., ar into subsequences. He thinks a partitioning is beautiful if for every piece (subsequence) it holds that, if it has length x, then no value occurs strictly more than ⌈x2⌉ times in it.

He didn't pick a range yet, so he's wondering: for q ranges (l,r), what is the minimum number of pieces he needs to partition the elements al, al+1, ..., ar into so that the partitioning is beautiful.

A sequence b is a subsequence of an array a if b can be obtained from a by deleting some (possibly zero) elements. Note that it does not have to be contiguous.

Input
The first line contains two integers n and q (1≤n,q≤3⋅105) — the length of the array a and the number of queries.

The second line contains n integers a1, a2, ..., an (1≤ai≤n) — the elements of the array a.

Each of the next q lines contains two integers l and r (1≤l≤r≤n) — the range of this query.

Output
For each query, print the minimum number of subsequences you need to partition this range into so that the partitioning is beautiful. We can prove such partitioning always exists.
*/

#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;
const int MAXN = 300005;

int n, q, tree[MAXN<<2], a[MAXN];
vector<int> vis[MAXN];

inline int cnt(int l, int r, int c){
	return upper_bound(vis[c].begin(),vis[c].end(),r) - lower_bound(vis[c].begin(),vis[c].end(),l);
}

inline int query(int node, int l, int r, int s, int e){
	if(e<l||s>r) return 0;
	if(l>=s&&r<=e) return cnt(s,e,tree[node]);
	int m = (l+r)>>1, left_node = node<<1, right_node = node<<1|1;
	return max(query(left_node,l,m,s,e),query(right_node,m+1,r,s,e));
}

inline void build(int node, int l, int r){
	if(l==r){
		tree[node] = a[l];
		return ;
	}
	int m = (l+r)>>1, left_node = node<<1, right_node = node<<1|1;
	build(left_node,l,m);
	build(right_node,m+1,r);
	if(cnt(l,m,tree[left_node])>cnt(m+1,r,tree[right_node])) tree[node] = tree[left_node];
	else tree[node] = tree[right_node];
}

int main(){
	scanf("%d %d",&n,&q);
	for(int i = 1 ; i <= n ; ++i){
		scanf("%d",&a[i]);
		vis[a[i]].push_back(i);
	}
	build(1,1,n);
	for(int i = 1, l, r ; i <= q ; ++i){
		scanf("%d %d",&l,&r);
		int tmp = query(1,1,n,l,r), m = (r-l+1)/2+((r-l+1)&1);
		if(tmp>m) printf("%d\n",(tmp<<1)-r+l-1);
		else puts("1");
	}
	return 0;
}