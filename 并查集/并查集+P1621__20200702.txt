/*
题目描述
Caima给你了所有[a,b]范围内的整数。一开始每个整数都属于各自的集合。每次你需要选择两个属于不同集合的整数，如果这两个整数拥有大于等于p的公共质因数，那么把它们所在的集合合并。

重复如上操作，直到没有可以合并的集合为止。

现在 Caima 想知道，最后有多少个集合。

输入格式
一行，共三个整数 a,b,p用空格隔开。

输出格式
一个数，表示最终集合的个数。
*/

/*
 * 用质数筛得到[1,b]的质数,再用并查集合并有相同因质数的数字,最后统计[a,b]区间的节点有多少是最顶节点就能得出答案
 */

//package P1621;

import java.util.*;
import java.io.*;

public class Main {

	static int parent[];
	
	public static void main(String[] args) {
		String[] tmp = new Scanner(System.in).nextLine().split(" ");
		int a = Integer.parseInt(tmp[0]), b = Integer.parseInt(tmp[1]), p = Integer.parseInt(tmp[2]), c = 0, ans = 0;
		tmp = null;
		//input ended
		int primes[] = new int[b+1], index = 0;
		boolean isNotPrime[] = new boolean[b+1], t = false;
		for(int i = 2 ; i <= b ; i++) {
			if(!isNotPrime[i]) {
				primes[++index] = i;
				if(!t&&primes[index]>=p) {
					c=index;
					t=true;
				}
			}
			for(int j = 1 ; j <= index && primes[j]*i <= b ; j++) {
				isNotPrime[primes[j]*i]=true;
				if(i%primes[j]==0)break;
			}
		}
		//sieve ended
		parent = new int[b+1];
		for(int i = 0 ; i <= b ; i++)
			parent[i] = -1;
		for(int i = c ; i <= index ; i++) {
			int num = 0;
			while(++num*primes[i]<a);
			while(primes[i]*(num+1)<=b) {
				union_vertices(primes[i]*(num+1),primes[i]*num);
				num++;
			}
		}
		//union find ended
		for(int i = a ; i <= b ; i++)
			if(parent[i]==-1)
				ans++;
		//tongji wancheng
		System.out.println(ans);
	}
	
	public static int[] find_root(int x) {
		int[] data = {x,0};
		while(parent[data[0]] != -1) {
			data[0] = parent[data[0]];
			data[1]++;
		}
		return data;
	}
	
	/* 0 - failed, 1 - union successfully */
	public static int union_vertices(int x , int y) {
		int[] x_root = find_root(x);
		int[] y_root = find_root(y);
		if(x_root[0] == y_root[0]) {
			return 0;
		}
		if(x_root[1]<y_root[1]) parent[x_root[0]] = y_root[0];
		else parent[y_root[0]] = x_root[0];
		return 1;
	}

}
