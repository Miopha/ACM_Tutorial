/*
https://www.luogu.com.cn/problem/P2661
题目描述
有n个同学（编号为1到n）正在玩一个信息传递的游戏。在游戏里每人都有一个固定的信息传递对象，其中，编号为 i 的同学的信息传递对象是编号为 Ti 的同学。

游戏开始时，每人都只知道自己的生日。之后每一轮中，所有人会同时将自己当前所知的生日信息告诉各自的信息传递对象（注意：可能有人可以从若干人那里获取信息， 但是每人只会把信息告诉一个人，即自己的信息传递对象）。当有人从别人口中得知自 己的生日时，游戏结束。请问该游戏一共可以进行几轮？

输入格式
共22行。

第1行包含1个正整数 n ，表示 n 个人。

第2行包含 n 个用空格隔开的正整数 T1,T2,...,Tn，其中第 i 个整数 Ti 表示编号为 i 的同学的信息传递对象是编号为 Ti的同学， Ti≤n 且 Ti ≠ i

输出格式
1个整数，表示游戏一共可以进行多少轮。
*/

/*
 * 求图中的最小环周长
 * 用并查集来求，连接两个点有相同的祖先代表可以连成一个环
 * 换周长=i,Ti的祖先距离之和+1
 */

//package P2661;

import java.util.*;
import java.io.*;

public class Main {

	static int n, dis[], parent[], ans;
	
	public static void main(String[] args) throws IOException {
		StreamTokenizer st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
		st.nextToken(); n = (int)st.nval;
		init();
		for(int i = 1 ; i <= n ; ++i) {
			st.nextToken();
			union(i,(int)st.nval);
		}
		System.out.println(ans);
	}
	
	public static int find(int x) {
		if(parent[x]!=x) {
			int last = parent[x];
			parent[x] = find(parent[x]);
			dis[x] += dis[last];
		}
		return parent[x];
	}
	
	public static void union(int x, int y) {
		int x_root = find(x), y_root = find(y);
		if(x_root==y_root)
			ans = Math.min(ans,dis[x]+dis[y]+1);
		else {
			parent[x_root] = y_root;
			dis[x] = dis[y] + 1;
		}
	}
	
	public static void init() {
		dis = new int[n+1];
		parent = new int[n+1];
		for(int i = 1 ; i <= n ; ++i)
			parent[i] = i;
		ans = Integer.MAX_VALUE;
	}

}
