/*
题目描述
如题，现在有一个并查集，你需要完成合并和查询操作。
输入格式
第一行包含两个整数N, M，表示共有N个元素和M个操作。
接下来M行,行包含三个整数Zi, Xi, Yi。
当Zi= 1时,将Xi与Yi所在的集合合并。
当Zi=2时,输出Xi与Y;是否在同-集合内,是的输出回;否则输出N。
输出格式
对于每一个Z= 2的操作，都有一行输出，每行包含一个大写字母，为Y或者N
*/

/*
 * 并查集,初始化每个点为-1,代表他没有父节点,这样find的时候就可以一直循环向上查找父节点直到查找到0开始
 * 为了让树长度不那么离谱,找的时候还要加个height值,代表树有多高,
 * 合并的时候需要找到X和Y的根,要把矮的合并到高的树上,X树高的时候parent[root(y)] = x_root[0],合并前parent[root(y)]为-1
 */

//package P3367;

import java.util.*;
import java.io.*;

public class Main {
	
	static FastScanner cin = new FastScanner(System.in);
	static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
	static int N , M , maxn = 100000;
	static int[] parent = new int[maxn];
	
	public static void main(String[] args) {
		N = cin.nextInt() ;  M = cin.nextInt();
		init();
		while(M-->0) {
			if(cin.nextInt()==1) {
				union_vertices(cin.nextInt(),cin.nextInt());
			}else {
				int x_root[] = find_root(cin.nextInt()) , y_root[] = find_root(cin.nextInt());
				if(x_root[0]==y_root[0]) out.println('Y');
				else out.println('N');
				out.flush();
			}
		}
	}
	
	public static int[] find_root(int x) {
		int[] data = {x,0};
		//int x_root = x , height = 0;
		while(parent[data[0]] != -1) {
			data[0] = parent[data[0]];
			data[1]++;
		}
		return data;
	}
	
	/* 0 - failed, 1 - union successfully */
	public static int union_vertices(int x , int y) {
		int[] x_root = find_root(x);
		int[] y_root = find_root(y);
		if(x_root[0] == y_root[0]) {
			return 0;
		}
		if(x_root[1]<y_root[1]) parent[x_root[0]] = y_root[0];
		else parent[y_root[0]] = x_root[0];
		return 1;
	}
	
	public static void init() {
		for(int i = 0 ; i < N ; i++)
			parent[i] = -1;
	}
	
	static class FastScanner{
		BufferedReader br;
		StringTokenizer st;
		public FastScanner(InputStream in) {
			br = new BufferedReader(new InputStreamReader(in),16384);
			st = new StringTokenizer("");
		}
		public String nextLine() {
			try {
				return br.readLine();
			}catch(Exception e) {
				return null;
			}
		}
		public boolean hasNext() {
			while(!st.hasMoreTokens()) {
				String s = nextLine();
				if(s==null)return false;
				st = new StringTokenizer(s);
			}
			return true;
		}
		public String next() {
			hasNext();
			return st.nextToken();
		}
		public int nextInt() {
			return Integer.parseInt(next());
		}
	}
}

/*
题目描述 
动物王国中有三类动物A,B,C，这三类动物的食物链构成了有趣的环形。A吃B，B吃C，C吃A。

现有N个动物，以1－N编号。每个动物都是A,B,C中的一种，但是我们并不知道它到底是哪一种。

有人用两种说法对这N个动物所构成的食物链关系进行描述：

第一种说法是“1 X Y”，表示X和Y是同类。

第二种说法是“2 X Y”，表示X吃Y。

此人对N个动物，用上述两种说法，一句接一句地说出K句话，这K句话有的是真的，有的是假的。当一句话满足下列三条之一时，这句话就是假话，否则就是真话。

1） 当前的话与前面的某些真的话冲突，就是假话；

2） 当前的话中X或Y比N大，就是假话；

3） 当前的话表示X吃X，就是假话。

你的任务是根据给定的N（1≤N≤50,000）和K句话（0≤K≤100,000），输出假话的总数。

输入描述:
第一行是两个整数N和K，以一个空格分隔。
以下K行每行是三个正整数 D，X，Y，两数之间用一个空格隔开，其中D表示说法的种类。
若D=1，则表示X和Y是同类。
若D=2，则表示X吃Y。
输出描述:
只有一个整数，表示假话的数目。
*/

/*
 * 并查集,可以先用一个类存储树的高度(rank)和这个节点的根(root)
 * 把数组开三倍大,a表示A类,a+N表示B类,a+2*N表示C类
 * 判断错误 1时判断x和y+N或y+2*N是否为一类
 * 2时判断 x和y,x或y+2*n是否为一类
 */
 
//package NC16884;

import java.util.*;
import java.io.*;

public class Main {

	static FastScanner cin = new FastScanner(System.in);
	static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
	static int N , K , maxn = 50000*3+5 , ans = 0;
	static int[] parent = new int[maxn]; 
	
	//A 0 B 1 C 2
	public static void main(String[] args) {
		N = cin.nextInt() ; K = cin.nextInt();
		init();
		while(K-->0) {
			int cmd = cin.nextInt() , x = cin.nextInt() , y = cin.nextInt();
			if(x>N || y>N) ans++;
			else if(cmd==1){
				if(find_root(x).root==find_root(y+N).root||find_root(x).root==find_root(y+2*N).root) {ans++;continue;}
				union_vertices(x,y);
				union_vertices(x+N,y+N);
				union_vertices(x+2*N,y+2*N);
			}else{
				if(find_root(x).root==find_root(y).root||find_root(x).root==find_root(y+2*N).root) {ans++;continue;}
				union_vertices(x,y+N);
				union_vertices(x+N,y+2*N);
				union_vertices(x+2*N,y);			
			}
		}
		out.println(ans);
		out.flush();
	}
	
	public static Data find_root(int x) {
		Data ans = new Data(x,0);
		//int x_root = x , height = 0;
		//System.out.println(parent[1]);
		while(parent[ans.root] != -1) {
			//System.out.println(ans.root);
			ans.changRoot(parent[ans.root]);
		}
		return ans;
	}
	
	public static int union_vertices(int x , int y) {
		Data x_root = find_root(x);
		Data y_root = find_root(y);
		if(x_root.root == y_root.root) {
			return 0;
		}
		if(x_root.rank<y_root.rank) parent[x_root.root] = y_root.root;
		else parent[y_root.root] = x_root.root;
		return 1;
	}
	
	public static void init() {
		for(int i = 0 ; i < maxn ; i++)
			parent[i] = -1;
	}
	

	static class FastScanner{
		BufferedReader br;
		StringTokenizer st;
		public FastScanner(InputStream in) {
			br = new BufferedReader(new InputStreamReader(in),16384);
			st = new StringTokenizer("");
		}
		public String nextLine() {
			try {
				return br.readLine();
			}catch(Exception e) {
				return null;
			}
		}
		public boolean hasNext() {
			while(!st.hasMoreTokens()) {
				String s = nextLine();
				if(s==null)return false;
				st = new StringTokenizer(s);
			}
			return true;
		}
		public String next() {
			hasNext();
			return st.nextToken();
		}
		public int nextInt() {
			return Integer.parseInt(next());
		}
	}
}

class Data{
	int root , rank;
	public Data(int a , int b) {
		root = a ; rank = b;
	}
	public void changRoot(int a) {
		root = a;
		rank++;
	}
}
