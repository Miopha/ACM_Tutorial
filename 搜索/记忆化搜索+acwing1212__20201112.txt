/*
https://www.acwing.com/problem/content/1214/
X 国王有一个地宫宝库，是 n×m 个格子的矩阵，每个格子放一件宝贝，每个宝贝贴着价值标签。

地宫的入口在左上角，出口在右下角。

小明被带到地宫的入口，国王要求他只能向右或向下行走。

走过某个格子时，如果那个格子中的宝贝价值比小明手中任意宝贝价值都大，小明就可以拿起它（当然，也可以不拿）。

当小明走到出口时，如果他手中的宝贝恰好是 k 件，则这些宝贝就可以送给小明。

请你帮小明算一算，在给定的局面下，他有多少种不同的行动方案能获得这 k 件宝贝。

输入格式
第一行 3 个整数，n,m,k，含义见题目描述。

接下来 n 行，每行有 m 个整数 Ci 用来描述宝库矩阵每个格子的宝贝价值。

输出格式
输出一个整数，表示正好取 k 个宝贝的行动方案数。

该数字可能很大，输出它对 1000000007 取模的结果。

数据范围
1≤n,m≤50,
1≤k≤12,
0≤Ci≤12
*/

//package acwing1212;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;

public class Main {
	
	static final int MOD = 1000000007;
	static int n, m, k, mp[][], ans;
	static long f[][][][];

	public static void main(String[] args) throws IOException {
		n = nextInt();
		m = nextInt();
		k = nextInt();
		mp = new int[n+1][m+1];
		f = new long[n+1][m+1][15][20];
		for(int i = 0 ; i <= n ; ++i)
			for(int j = 0 ; j <= m ; ++j)
				for(int l = 0 ; l <= 14 ; ++l)
					for(int d = 0 ; d <= 15 ; ++d)
						f[i][j][l][d] = -1;
		for(int i = 1 ; i <= n ; ++i)
			for(int j = 1 ; j <= m ; ++j)
				mp[i][j] = nextInt();
		DFS(1,1,0,-1);
		System.out.println(f[1][1][0][0]);
		//System.out.println(f[2][2][2][2]);
	}
	
	// x, y
	// mx, 当前选到的最大值
	// cnt, 选了多少个
	public static long DFS(int x, int y, int cnt, int mx) {
		//System.out.println("x="+x+" y="+y+" cnt"+cnt+" mx"+mx);
		if(f[x][y][cnt][mx+1]!=-1) return f[x][y][cnt][mx+1];
		if(x==n&&y==m) {
			if(cnt==k) {
				return f[x][y][cnt][mx+1] = 1;
			}
			else if(cnt+1==k&&mp[x][y]>mx) {
				return f[x][y][cnt][mx+1] = 1;
			}else {
				return f[x][y][cnt][mx+1] = 0;
			}
		}else {
			long res = 0;
			if(mp[x][y]>mx) {
				// 向右
				if(y+1<=m) res = (res + DFS(x,y+1,cnt+1,mp[x][y]) + DFS(x,y+1,cnt,mx)) % MOD;
				// 向左
				if(x+1<=n) res = (res + DFS(x+1,y,cnt+1,mp[x][y]) + DFS(x+1,y,cnt,mx)) % MOD;
			}else {
				// 向右
				if(y+1<=m) res = (res + DFS(x,y+1,cnt,mx)) % MOD;
				// 向左
				if(x+1<=n) res = (res + DFS(x+1,y,cnt,mx)) % MOD;
			}
			f[x][y][cnt][mx+1] = res % MOD;
			return f[x][y][cnt][mx+1];
		}
		
	}
	
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StreamTokenizer st = new StreamTokenizer(br);
	static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
	public static int nextInt() throws IOException {
		st.nextToken();
		return (int)st.nval;
	}

}
