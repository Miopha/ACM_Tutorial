/*
https://www.luogu.com.cn/problem/P1828
题目描述
农夫John发现做出全威斯康辛州最甜的黄油的方法：糖。把糖放在一片牧场上，他知道N（1<=N<=500）只奶牛会过来舔它，这样就能做出能卖好价钱的超甜黄油。当然，他将付出额外的费用在奶牛上。

农夫John很狡猾。像以前的Pavlov，他知道他可以训练这些奶牛，让它们在听到铃声时去一个特定的牧场。他打算将糖放在那里然后下午发出铃声，以至他可以在晚上挤奶。

农夫John知道每只奶牛都在各自喜欢的牧场（一个牧场不一定只有一头牛）。给出各头牛在的牧场和牧场间的路线，找出使所有牛到达的路程和最短的牧场（他将把糖放在那）

输入格式
第一行: 三个数：奶牛数N，牧场数（2<=P<=800），牧场间道路数C(1<=C<=1450)

第二行到第N+1行: 1到N头奶牛所在的牧场号

第N+2行到第N+C+1行： 每行有三个数：相连的牧场A、B，两牧场间距离D（1<=D<=255），当然,连接是双向的

输出格式
一行 输出奶牛必须行走的最小的距离和
*/

/*
 * 做n次出发点在奶牛上的SPFA最短路，需要用到SLF优化
 */
 
#include <cstdio>
#include <iostream>
#include <cstring>
#include <deque>

using namespace std;

const int MAXN = 805, MAXP = 805, MAXC = 1455, INF = 123456789;
int head[MAXP], tot;

struct Edge{
    int u, to, val, next;
}G[MAXC<<1];

inline int read(){
	int x = 0, f = 1;
	char ch = getchar();
	while(ch<'0'||ch>'9'){
		if(ch=='-')
			f = -1;
		ch = getchar();
	}
	while(ch>='0'&&ch<='9'){
		x=(x<<1)+(x<<3)+(ch^48);
		ch = getchar();
	}
	return x*f;
}

inline void addEdge(int u, int v, int w){
    G[++tot].u = u;
    G[tot].to = v;
    G[tot].val = w;
    G[tot].next = head[u];
    head[u] = tot;
}

int n, p, c, cows[MAXN], val[MAXP], dis[MAXP], ans;
bool inq[MAXP];

void SPFA(int x){
	memset(inq,false,sizeof(inq));
	memset(dis,INF,sizeof(dis));
	deque<int> q;
    dis[x] = 0;
    q.push_front(x);
    inq[x] = true;
    while(!q.empty()){
        int cur = q.front(); q.pop_front();
        inq[cur] = false;
        for(int i = head[cur] ; i ; i = G[i].next){
            int to = G[i].to;
            if(dis[to]>dis[cur]+G[i].val){
                dis[to]=dis[cur]+G[i].val;
                if(!inq[to]){
                    inq[to] = true;
					//SLF
                    if(q.empty()||dis[to]>dis[q.front()]) q.push_back(to);
                    else q.push_front(to);
                }
            }
        }
    }
    for(int i = 1 ; i <= p ; ++i){
		val[i] += dis[i];
	}
}

int main(){
	ans = INF;
	n = read();
	p = read();
	c = read();
	for(int i = 1 ; i <= n ; ++i) cows[i] = read();
	for(int i = 1, u, v, w ; i <= c ; ++i){
		u = read();
		v = read();
		w = read();
		addEdge(u,v,w);
		addEdge(v,u,w);
	}
	for(int i = 1 ; i <= n ; ++i){
		SPFA(cows[i]);
	}
	for(int i = 1 ; i <= p ; ++i){
		ans = min(ans,val[i]);
	}
	printf("%d\n",ans);
	return 0;
}