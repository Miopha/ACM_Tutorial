/*
https://www.luogu.com.cn/problem/P4017
题目背景
你知道食物链吗？Delia 生物考试的时候，数食物链条数的题目全都错了，因为她总是重复数了几条或漏掉了几条。于是她来就来求助你，然而你也不会啊！写一个程序来帮帮她吧。
题目描述
给你一个食物网，你要求出这个食物网中最大食物链的数量。

（这里的“最大食物链”，指的是生物学意义上的食物链，即最左端是不会捕食其他生物的生产者，最右端是不会被其他生物捕食的消费者。）

Delia 非常急，所以你只有 1 秒的时间。

由于这个结果可能过大，你只需要输出总数模上 80112002 的结果。
输入格式
第一行，两个正整数 n、m，表示生物种类 n 和吃与被吃的关系数 m。

接下来 m 行，每行两个正整数，表示被吃的生物A和吃A的生物B。
输出格式
一行一个整数，为最大食物链数量模上 80112002 的结果
*/

#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
#include <cmath>
#define re register
#define pb push_back
#define cl clear
#define MAXN 5005
#define MAXM 500005

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> P;
const int INF = 1e9;

inline int read(){
	int x = 0, f = 1;
	char ch = getchar();
	while(ch<'0'||ch>'9'){
		if(ch=='-')
			f = -1;
		ch = getchar();
	}
	while(ch>='0'&&ch<='9'){
		x=(x<<1)+(x<<3)+(ch^48);
		ch = getchar();
	}
	return x*f;
}

int head[MAXN], tot;

struct Edge{
    int u, v, next;
}G[MAXM];

inline void addEdge(int u, int v){
    G[++tot].u = u;
    G[tot].v = v;
    G[tot].next = head[u];
    head[u] = tot;
}

const int MOD = 80112002;
int n, m, in[MAXN], out[MAXN], f[MAXN], ans;
queue<int> q;

void solve(){
    n = read();
    m = read();
    for(re int i = 1, u, v ; i <= m ; ++i){
        u = read();
        v = read();
        addEdge(u,v);
        ++out[u];
        ++in[v];
    }
    for(re int i = 1 ; i <= n ; ++i){
        if(!in[i]){
            q.push(i);
            f[i] = 1;
        }
    }
    while(!q.empty()){
        int nw = q.front(); q.pop();
        for(re int i = head[nw] ; i ; i = G[i].next){
            int aft = G[i].v;
            f[aft] += f[nw];
            f[aft] %= MOD;
            --in[aft];
            if(!in[aft]){
                if(!out[aft]){
                    ans += f[aft];
                    ans %= MOD;
                }
                else
                    q.push(aft);
            }
        }
    }
    printf("%d\n",ans);
}

int main(){
    int t = 1;
    //t = read();
    while(t--) solve();
    return 0;
}
