/*
https://codeforces.com/problemset/problem/489/E
A traveler is planning a water hike along the river. He noted the suitable rest points for the night and wrote out their distances from the starting point. Each of these locations is further characterized by its picturesqueness, so for the i-th rest point the distance from the start equals xi, and its picturesqueness equals bi. The traveler will move down the river in one direction, we can assume that he will start from point 0 on the coordinate axis and rest points are points with coordinates xi.

Every day the traveler wants to cover the distance l. In practice, it turns out that this is not always possible, because he needs to end each day at one of the resting points. In addition, the traveler is choosing between two desires: cover distance l every day and visit the most picturesque places.

Let's assume that if the traveler covers distance rj in a day, then he feels frustration , and his total frustration over the hike is calculated as the total frustration on all days.

Help him plan the route so as to minimize the relative total frustration: the total frustration divided by the total picturesqueness of all the rest points he used.

The traveler's path must end in the farthest rest point.

Input
The first line of the input contains integers n, l (1 ≤ n ≤ 1000, 1 ≤ l ≤ 105) — the number of rest points and the optimal length of one day path.

Then n lines follow, each line describes one rest point as a pair of integers xi, bi (1 ≤ xi, bi ≤ 106). No two rest points have the same xi, the lines are given in the order of strictly increasing xi.

Output
Print the traveler's path as a sequence of the numbers of the resting points he used in the order he used them. Number the points from 1 to n in the order of increasing xi. The last printed number must be equal to n.
*/

/*
 * 记疲劳值总和为P，美丽值总和为B，那么最后值为V=P/B
 * 那么式子最后可以化成V*B-P=0，现我们要求满足这个式子的最小的V，考虑用二分来逼近，O(logn)
 * 路的选择可以用DP[i](当前V走到i点时最大的值)，化成减式也是为了更好DP，O(n^2)
 */
 
#include <cstdio>
#include <cmath>

using namespace std;
const int MAXN = 1005, INF = 1e9;
const double ESP = 1e-8;

int n, l, x[MAXN], b[MAXN], cnt, ans[MAXN];
// DP, 走到第i个点时最大值
// pre, 前趋
double DP[MAXN], pre[MAXN];

bool check(double mid){ // sigma (mid*fi-ti) == 0
	for(int i = 1 ; i <= n ; ++i){
		DP[i] = -INF;
		for(int j = 0 ; j < i ; ++j){
			if(DP[j] + mid * b[i] - sqrt(abs(x[i]-x[j]-l))>DP[i]){
				DP[i] = DP[j] + mid * b[i] - sqrt(abs(x[i]-x[j]-l));
				pre[i] = j;
			}
		}
	}

	if(DP[n]-ESP>=0){
		return true;
	}else{
		return false;
	}
}

int main(){
	scanf("%d %d",&n,&l);
	for(int i = 1 ; i <= n ; ++i) scanf("%d %d",&x[i],&b[i]);
	double l = 0, r = 1e9;
	while(r-l>ESP){
		double mid = (r+l) / 2;
		if(check(mid)){ // increase
			r = mid;
		}else{ // decrease
			l = mid;
		}
		// printf("l=%lf r=%lf mid=%lf\n",l,r,mid);
	}
	int tmp = n;
	while(n){
		ans[++cnt] = n;
		n = pre[n];
	}
	while(cnt) printf("%d ",ans[cnt--]);
	puts("");
	return 0;
}