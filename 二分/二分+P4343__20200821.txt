/*
https://www.luogu.com.cn/problem/P4343
题目背景
曾经发明了信号增幅仪的发明家 SHTSC 又公开了他的新发明：自动刷题机——一种可以自动 AC 题目的神秘装置。

题目描述
自动刷题机刷题的方式非常简单：首先会瞬间得出题目的正确做法，然后开始写程序。每秒，自动刷题机的代码生成模块会有两种可能的结果：

1.写了 x 行代码
2.心情不好，删掉了之前写的 y 行代码。（如果 y 大于当前代码长度则相当于全部删除。）

对于一个 OJ，存在某个固定的正整数长度 n，一旦自动刷题机在某秒结束时积累了大于等于 nn 行的代码，它就会自动提交并 AC 此题，然后新建一个文件（即弃置之前的所有代码）并开始写下一题。SHTSC 在某个 OJ 上跑了一天的自动刷题机，得到了很多条关于写代码的日志信息。他突然发现自己没有记录这个 OJ 的 n 究竟是多少。所幸他通过自己在 OJ 上的 Rank 知道了自动刷题机一共切了 k 道题，希望你计算 n 可能的最小值和最大值。

输入格式
第一行两个整数 l , k，表示刷题机的日志一共有 l 行，一共了切了 k 题。

接下来 l 行，每行一个整数 xi ，依次表示每条日志。若 xi ≥0，则表示写了 xi 行代码，若xi<0，则表示删除了 -xi 行代码。

输出格式
输出一行两个整数，分别表示 n 可能的最小值和最大值。
如果这样的 n 不存在，请输出一行一个整数 -1 。
*/

/*
 * 二分枚举n
 */
 
//package P4343;

import java.io.*;

public class Main {

	static int l, k, data[];
	static long L, R, ans;
	
	public static void main(String[] args) throws IOException {
		StreamTokenizer st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
		st.nextToken(); l = (int)st.nval;
		st.nextToken(); k = (int)st.nval;
		init();
		for(int i = 1 ; i <= l ; ++i) {
			st.nextToken(); data[i] = (int)st.nval;
		}
		while(L<=R) {
			long mid = (L+R)>>1, typed = 0, ac = 0;
			for(int i = 1 ; i <= l ; ++i) {
				typed += data[i];
				if(typed>=mid) {
					++ac;
					typed = 0;
				}else if(typed<0) {
					typed = 0;
				}
			}
			if(ac<=k) {
				R = mid - 1;
				if(ac==k)
					ans = mid;
			}else{
				L = mid + 1;
			}
			//System.out.println("L="+L+" R="+R+" mid="+mid+" ac="+ac+" typed="+typed);
		}
		if(ans!=0) {
			System.out.print(ans);
			ans = 0; L = 1; R = Long.MAX_VALUE>>1;
			while(L<=R) {
				long mid = (L+R)>>1, typed = 0, ac = 0;
				for(int i = 1 ; i <= l ; ++i) {
					typed += data[i];
					if(typed>=mid) {
						++ac;
						typed = 0;
					}else if(typed<0) {
						typed = 0;
					}
				}
				if(ac<=k-1) {
					R = mid - 1;
				}else{
					L = mid + 1;
					if(ac==k) 
						ans = mid;
				}
			}
			System.out.println(" "+ans);
		}else
			System.out.println("-1");
	}
	
	public static void init() {
		data = new int[l+1];
		L = 1;
		R = Long.MAX_VALUE>>1;
	}

}
