/*
https://www.luogu.com.cn/problem/P1948
题目描述
Farmer John wants to set up a telephone line at his farm. Unfortunately, the phone company is uncooperative, so he needs to pay for some of the cables required to connect his farm to the phone system.

There are N (1 ≤ N ≤ 1,000) forlorn telephone poles conveniently numbered 1..N that are scattered around Farmer John's property; no cables connect any them. A total of P (1 ≤ P ≤ 10,000) pairs of poles can be connected by a cable; the rest are too far apart.

The i-th cable can connect the two distinct poles Ai and Bi, with length Li (1 ≤ Li ≤ 1,000,000) units if used. The input data set never names any {Ai, Bi} pair more than once. Pole 1 is already connected to the phone system, and pole N is at the farm. Poles 1 and N need to be connected by a path of cables; the rest of the poles might be used or might not be used.

As it turns out, the phone company is willing to provide Farmer John with K (0 ≤ K < N) lengths of cable for free. Beyond that he will have to pay a price equal to the length of the longest remaining cable he requires (each pair of poles is connected with a separate cable), or 0 if he does not need any additional cables.

Determine the minimum amount that Farmer John must pay.

多年以后，笨笨长大了，成为了电话线布置师。由于地震使得某市的电话线全部损坏，笨笨是负责接到震中市的负责人。该市周围分布着N(1<=N<=1000)根据1……n顺序编号的废弃的电话线杆，任意两根线杆之间没有电话线连接，一共有p(1<=p<=10000)对电话杆可以拉电话线。其他的由于地震使得无法连接。

第i对电线杆的两个端点分别是ai,bi，它们的距离为li(1<=li<=1000000)。数据中每对(ai,bi)只出现一次。编号为1的电话杆已经接入了全国的电话网络，整个市的电话线全都连到了编号N的电话线杆上。也就是说，笨笨的任务仅仅是找一条将1号和N号电线杆连起来的路径，其余的电话杆并不一定要连入电话网络。

电信公司决定支援灾区免费为此市连接k对由笨笨指定的电话线杆，对于此外的那些电话线，需要为它们付费，总费用决定于其中最长的电话线的长度(每根电话线仅连接一对电话线杆)。如果需要连接的电话线杆不超过k对，那么支出为0.

请你计算一下，将电话线引导震中市最少需要在电话线上花多少钱？

输入格式
输入文件的第一行包含三个数字n,p,k;

第二行到第p+1行，每行分别都为三个整数ai,bi,li。

输出格式
一个整数，表示该项工程的最小支出，如果不可能完成则输出-1.
*/

#include <cstdio>
#include <vector>
#include <iostream>
#include <queue>
#include <algorithm>

using namespace std;
const int MAXN = 1005, MAXP = 10005;

int head[MAXN], tot;

struct Edge{
    int u, to, next;
    double val;
}G[MAXP<<1];

inline void addEdge(int u, int v, double w){
    G[++tot].u = u;
    G[tot].to = v;
    G[tot].val = w;
    G[tot].next = head[u];
    head[u] = tot;
}

deque<int> q;
int n, p, k, l, r, as, used[MAXN];
bool inq[MAXN], vis[MAXN];

bool SPFA(int as){
	for(int i = 2 ; i <= n ; ++i) used[i] = 0x3f3f3f3f;
	q.push_front(1);
	inq[1] = true;
	while(!q.empty()){
		int np = q.front(); q.pop_front();
		inq[np] = false;
		for(int i = head[np], to ; i ; i = G[i].next){
			to = G[i].to;
			if(used[to]>used[np]+(G[i].val>as)){
				used[to] = used[np]+(G[i].val>as);
				if(q.empty()||used[to]>used[q.front()]) q.push_back(to);
				else q.push_front(to);
			}
		}
	}
	return used[n] <= k;
}

inline void DFS(int np){
	vis[np] = true;
	for(int i = head[np], to ; i ; i = G[i].next){
		to = G[i].to;
		if(!vis[to]) DFS(to);
	}
}

int main(){
	scanf("%d %d %d",&n,&p,&k);
	for(int i = 1, u, v, w ; i <= p ; ++i){
		scanf("%d %d %d",&u,&v,&w);
		addEdge(u,v,w);
		addEdge(v,u,w);
		r = max(r,w);
	}
	DFS(1);
	if(!vis[n]){
		puts("-1");
		return 0;
	}
	while(l<=r){
		int mid = (l+r)>>1;
		if(SPFA(mid)){
			r = mid - 1;
		}else{
			l = mid + 1;
		}
	}
	cout<<l<<endl;
	return 0;
}