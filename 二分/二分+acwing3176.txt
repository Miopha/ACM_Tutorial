/*
https://www.acwing.com/problem/content/3179/

小明公司的办公区有一条长长的走廊，由 N 个方格区域组成，如下图所示。

QQ截图20210112140031.png

走廊内部署了 K 台扫地机器人，其中第 i 台在第 Ai 个方格区域中。

已知扫地机器人每分钟可以移动到左右相邻的方格中，并将该区域清扫干净。

请你编写一个程序，计算每台机器人的清扫路线，使得

它们最终都返回出发方格，
每个方格区域都至少被清扫一遍，
从机器人开始行动到最后一台机器人归位花费的时间最少。
注意多台机器人可以同时清扫同一方块区域，它们不会互相影响。

输出最少花费的时间。

在上图所示的例子中，最少花费时间是 6。

第一台路线：2−1−2−3−4−3−2，清扫了 1、2、3、4 号区域。

第二台路线 5−6−7−6−5，清扫了 5、6、7。

第三台路线 10−9−8−9−10，清扫了 8、9 和 10。

输入格式
第一行包含两个整数 N 和 K。

接下来 K 行，每行一个整数 Ai。

输出格式
输出一个整数表示答案。

数据范围
1≤K<N≤105,
*/

#include <cstdio>
#include <iostream>
#include <vector>
#include <cstring>
#include <ctype.h>
#include <iostream>
#define CHECK(x) cout << (#x) << " is " << (x) << endl;
#define pb push_back

using namespace std;
const int MAXN = 1000005;

char s[MAXN], a[] = {' ','A','l','i','c','e'}, b[] = {' ','B','o','b'};
int k, len, ans;
vector<int> alice, bob;

int main(){
	scanf("%d",&k);
	getchar();
	char c;
	do{
		scanf("%c",&c);
		s[++len] = c;
	}while(c^'\n');
	for(int i = 1 ; i <= len ; ++i){
		for(int j = 1 ; j <= 5 ; ++j){
			if(a[j]^s[i]) break;
			++i;
			if(j==5&&!isalpha(s[i-6])&&!isalpha(s[i])) alice.pb(i-5);
		}
	}
	for(int i = 1 ; i <= len ; ++i){
		for(int j = 1 ; j <= 3 ; ++j){
			if(b[j]^s[i]) break;
			++i;
			if(j==3&&!isalpha(s[i-4])&&!isalpha(s[i])) bob.pb(i-3);
		}
	}
	
	for(auto a : alice) CHECK(a);
	for(auto b : bob) CHECK(b);
	
	vector<int>::iterator it_bob = bob.begin();
	for(auto it : alice){
		while(*it_bob^bob[bob.size()-1]&&*(it_bob+1)-it+5<=k) ++it_bob;
		// CHECK(*it_bob);
		vector<int>::iterator tmpIt = it_bob;
		CHECK(*tmpIt);
		while((*tmpIt^*bob.begin())&&*tmpIt>=it) ++ans, --tmpIt;
		while(*tmpIt^*bob.begin()&&*tmpIt>=it-k-3) ++ans, --tmpIt;
		if(*tmpIt==*bob.begin()&&(*tmpIt>=it||*tmpIt>=it-k-3)) ++ans;
	}
	printf("%d\n",ans);
	
	return 0;
}