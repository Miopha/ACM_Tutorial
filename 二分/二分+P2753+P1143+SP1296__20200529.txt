/*
题目描述
使得x^x达到或超过n位数字的最小正整数X是多少?
输入格式
一个正整数n
输出格式
使得x^x达到n位数字的最小正整数x
说明/提示
n <= 2000000000
*/

/*
 * 位数=log10(x)+1,则x^x的位数为xlog10(x)+1
 * 接下来用二分查找即可
 */

//package P2759;

import java.util.Scanner;

public class Main {
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		long l = 1 , r = 2000000000 , target = sc.nextInt() , mid , len;
		sc.close();
		
		while(l < r) {
			mid = (l + r) >> 1;
			len = (long)(Math.log10(mid)*mid+1);
			if(len<target)l = mid + 1;
			else r = mid;
		}
		
		System.out.println(l);
	}

}

/*
题目描述
请你编一程序实现两种不同进制之 间的数据转换。
输入格式.
共三行，第一行是一个正整数,表示需要转换的数的进制n(2 <= n <= 16), 第二行是一个n进制数,若n > 10则用大写字母A - F表示数码10一15,粗该n进制数对应的十进制的值不超过1000000000,
第三行也是一个正整数,示转换之后的数的进制m(2≤m≤16)。
输出格式
一个正整数,表示转换之后的m进制数。
*/

/*
 * Java直呼内行，用自带api解决
 */
 
//package P1143;
public class Main {
	public static void main(String[] args) {
		java.util.Scanner sc = new java.util.Scanner(System.in);
		int hex = sc.nextInt();
		System.out.println(Integer.toString(Integer.parseInt(sc.next(),hex),sc.nextInt()).toUpperCase());
	}
}

/*
题目描述
The SUM problem can be formulated as follows: given four lists A, B, C, D of integer values, compute how many quadruplet (a, b, c, d ) belongs to A x B x C x D are such that a + b + c + d = 0 . In the following, we assume that all lists have the same size n

输入格式
The first line of the input file contains the size of the lists n (this value can be as large as 4000). We then have n lines containing four integer values (with absolute value as large as 2 ^28) that belong respectively to A, B, C and D

限制
n<=4000;

题目大意
给你四个数组A,B,C,D,问满足A+B+C+D==0的组合有几个
*/

/*
 * 移项得A+B=-(C+D),把A+B和C+D算出来,再sort,就可以二分查找了
 * 注意可以从C+D中找出几个相同的数,确定有目标数字之后遍历[l,r]区间即可
 * 遍历到大于目标数字的就可以退出
 */

#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <stdio.h>
#define N 4005

using namespace std;

inline int read(){
    int x = 0 , f = 1;
    char ch = getchar();
    while(ch<'0'||ch>'9'){
        if(ch=='-')
            f = -1;
        ch = getchar();
    }
    while(ch>='0'&&ch<='9'){
        x=(x<<1)+(x<<3)+(ch^48);
        ch = getchar();
    }
    return x*f;
}

int A[N],B[N],C[N],D[N],AB[N*N],CD[N*N],ans=0;

void binarySearch(int l , int r , int target){
    int mid;
    bool hasTarget = false;

    while(l<=r){
        mid=(l+r)>>1;
        if(CD[mid]<target) l = mid + 1;
        else if(CD[mid]>target) r = mid - 1;
        else{
            hasTarget = true;
            break;
        }
    }

    if(hasTarget){
        for(;l<=r;l++){
            if(CD[l]==target) ans++;
            else if(CD[l]>target) break;
        }
    }
}

int main(){
    int n = read() , index = 1;
    for(int i = 1 ; i <= n ; i++){
        A[i] = read(); B[i] = read() ; C[i] = read(); D[i] = read();
    }
    for(int i = 1 ; i <= n ; i++)
        for(int j = 1 ; j <= n ; j++){
            AB[index]=A[i]+B[j];
            CD[index++]=C[i]+D[j];
        }
    sort(AB+1,AB+index);
    sort(CD+1,CD+index);
    for(int i = 1 ; i < index ; i++)
        binarySearch(1,index-1,-AB[i]);
    printf("%d\n",ans);
    return 0;
}
