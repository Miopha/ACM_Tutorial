/*
题目描述:
有一个长为n的序列a,以及一个大小为k的窗口。现在这个从左边开始向右滑动,每次滑动一个单位，
求出每次滑动后窗口中的最大值和最小值。
例如:
The array is [1,3,-1,-3,5,3,6,7],and k= 3。
输入格式:
输入一共有两行,第一行有两个正整数n,k。第二行n个整数,表示序列a
输出格式:
输出共两行，第一行为每次窗口滑动的最小值
第二行为每次窗口滑动的最大值
*/

/*
 * 单调队列模板题
 */
 
#include <iostream>
#include <stdio.h>

using namespace std;

//q队列数组，p数组的下标，head队首位置，tail队尾位置，tail==0时队列为空
int n , k , data[1000005] , q[1000005] , p[1000005] , head = 1 , tail;

int main(){
    int n , k;
    cin>>n>>k;
    for(int i = 1 ; i <= n ; i++) cin>>data[i];

    for(int i = 1 ; i <= n ; i++){
        //加进来的数字比队列里的数字要小的话，队尾的数字踢掉
        while(tail>=head&&data[i]<=q[tail]) tail--;
        //把data[i]放进队列里
        q[++tail]=data[i];
        //存储data[i]的下标
        p[tail]=i;
        //数字太老时踢掉
        if(p[head]+k<=i)head++;
        //输出答案
        if(i>=k)printf("%d ",q[head]);
    }
    printf("\n");

    head = 1 ; tail = 0;
    for(int i = 1 ; i <= n ; i++){
        while(tail>=head&&data[i]>=q[tail]) tail--;
        q[++tail]=data[i];
        p[tail]=i;
        if(p[head]+k<=i)head++;
        if(i>=k)printf("%d ",q[head]);
    }
    printf("\n");
    return 0;
}

/*
题目描述:
求1^b+2^b+……+a^b的和除以10^4的余数。
输入格式
本题有多组数据。
第一行一个整数N,表示共有N组测试数据。
对于每组数据,一行两个整数a,b.
输出格式
对于每组数据,一行一个整数, 表示答案。
*/

/*
 * 根据a^b%mod=(a%mod)^b,可以看出1^b+2^b+……+9999^b=10001^b+10002^b+……+19999^b
 * 所以我们可以用add存储前10000项的和
 * 可以推出答案ans = (add * (a / mod) % mod + (i=1 sigma a % mod) qpow(i,b) % mod) %mod
 */
 
#include <iostream>
#include <stdio.h>
#include <math.h>

using namespace std;

int qpow(int a, int n , int mod){//a^n%mod
    int ans = 1;
    a %= mod;
    while(n){
        if(n&1)ans = ans % mod * a % mod;
        a = a % mod * a % mod;
        n>>=1;
    }
    return ans;
}

int main(){
    int t;
    cin>>t;
    while(t--){
        int a , b , ans = 0, sum[10001] , mod = 10000 , add = 0;
        cin>>a>>b;

        for(int i = 0 ; i <= mod ; i++){
            sum[i] = qpow(i,b,mod);
            add += sum[i];
            add %= mod;
        }

        ans += add * (a / mod) % mod;

        for(int i = 1 ; i <= a % mod ; i++){
            ans += sum[i];
            ans %= mod;
        }

        printf("%d\n",ans);
    }
    return 0;
}
