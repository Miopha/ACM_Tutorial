/*
I. Pudding Store
time limit per test2.0 s
memory limit per test512 megabytes
inputstandard input
outputstandard output
159 is a boy. He has a pudding store.

There are n different puddings numbered from 1 to n lined up in a row in the pudding store. (Note that the i-th pudding in the row may not be the pudding with the number i.) Now, n students numbered from 1 to n are coming to sample these puddings in a specific way. That is, for the i-th student, he will sample each one of the first i puddings in the row. Sampling the pudding numbered i gives the sampler a satisfaction value of 2×i. And if the sum of all satisfaction values that the i-th student gets is divisible by i, we would say that the i-th student is satisfied.

Now, 159 wants to know, how many different arrangements of the puddings in a row that every student will be satisfied after sampling. Two arrangements are different, if there exists a pudding that its position is different. Note that the number of arrangements may be very large so he just needs the remainder after division by 998244353 of the result.

Input
Each test contains multiple test cases. The first line contains the number of test cases t (1≤t≤10). Description of the test cases follows.

The first and only line of each test case contains one integer n (1≤n≤109) — the number of the puddings and the students.

Output
For each test case, print a single line that contains one integer — the number of satisfying arrangements modulo 998244353.
*/

#include <cstdio>

using namespace std;
const int P = 998244353;
typedef long long ll;

int n;

ll qpow(ll a, ll n){
	ll res = 1;
	while(n){
		if(n&1) res = res * a % P;
		a = a * a % P;
		n >>= 1;
	}
	return res % P;
}

void solve(){
	scanf("%d",&n);
	if(n==1) puts("1");
	else if(n==2) puts("2");
	else if(n==3) puts("6");
	else printf("%lld\n",qpow(2,n-2)*3%P);
}

int main(){
	int t;
	scanf("%d",&t);
	while(t--) solve();
	return 0;
}

/*
H. Three Integers
time limit per test1 second
memory limit per test512 megabytes
inputstandard input
outputstandard output
You are given three non-negative integers a, b, and c. Find three positive integers x, y, and z that satisfy xmody=a, ymodz=b, and zmodx=c.

Input
The first line contains an integer t (1≤t≤105) — the number of test cases.

Each test case contains 3 integers a, b, c (0≤a,b,c≤109) on a single line.

Output
For each test case, if there are such three integers satisfying the condition, output "YES", then output the three integers x, y, z (1≤x,y,z≤1018) on the following line, or "NO" otherwise.
*/

#include <cstdio>
#include <algorithm>

using namespace std;
typedef long long ll;

ll a, b, c;

bool check(int k1, int k2, int k3){
	ll x, y, z;
	x = c*k1*k2+b*k1+a;
	y = a*k2*k3+c*k2+b;
	z = b*k3*k1+a*k3+c;
	if(!x||!y||!z) return false;
	if(x%y==a&&y%z==b&&z%x==c){
		printf("YES\n%lld %lld %lld\n",x,y,z);
		return true;
	}
	return false;
}

void solve(){
	scanf("%lld %lld %lld",&a,&b,&c);
	if(a==b&&b==c){
		if(!a&&!b&&!c) printf("YES\n1 1 1\n");
		else puts("NO");
	}else{
		if(check(0,1,1)) return ;
		else if(check(1,0,1)) return ;
		else if(check(1,1,0)) return ;
		else if(check(0,1,2)) return ;
		else if(check(1,0,2)) return ;
		else if(check(1,2,0)) return ;
		else if(check(0,2,1)) return ;
		else if(check(2,0,1)) return ;
		else if(check(2,1,0)) return ;
		puts("NO");
	}
}

int main(){
	int t;
	scanf("%d",&t);
	while(t--) solve();
	return 0;
}

/*
C. Necklace
time limit per test1.0 s
memory limit per test512 megabytes
inputstandard input
outputstandard output
Bob has given Alice a necklace as her birthday gift. That necklace has N crystals, M of which catches her fancy. Formally, crystals with labels of 1..N are strung sequentially in a circle. And those catching her fancy are labelled n1,n2,...,nM.

Alice would like the necklace to be divided into M pieces. She asked Bob to sever the necklace into M pieces. Each piece should consist of a sequence of crystals as in the original necklace (i.e., the crystal labels are contiguous, except that 1 following N is accepted) and should include one crystal catching Alice's fancy. Obviously, each crystal must belong to exactly one piece.

However, an excessively long piece of severed necklaces could not fit Alice's slim neck. So she wants to know, among all possible severings as requested, what the minimum length of the longest piece from a severed necklace is. She wants you to answer this question.

Input
The first line of the input data contains 2 integers N and M (1≤M≤N<1018 and M≤106).

The second line contains M integers, the i-th of which represents ni. The ni's are given in ascending order.

Output
You need to output your answer in one line.
*/

#include <cstdio>
#include <algorithm>
#define gc()(is==it?it=(is=in)+fread(in,1,Q,stdin),(is==it?EOF:*is++):*is++)

using namespace std;
typedef long long ll;
const int MAXN = 1e6 + 5;

const int Q=(1<<24)+1;
char in[Q],*is=in,*it=in,c;
void read(long long &n){
  for(n=0;(c=gc())<'0'||c>'9';);
  for(;c<='9'&&c>='0';c=gc())n=n*10+c-48;
}


ll n, m, a[MAXN];
/*
// WA4
bool check(ll x){
	int en = 0, last = 0;
	for(int i = 1 ; i < m - 1 ; ++i){
		if(a[i]-a[i-1]>x){
			en = a[i-1] + x - 1;
			last = i-1;
			break;
		}
	}
	if(!en){
		if(n-a[m-1]+1+a[0]-1<=x) return true;
		else{
			en = a[m-1]+x-1;
			last = m - 1;
		}
	}
	if(en>n) en -= n;
	// printf("last=%d en=%d\n",last,en);
	ll st = a[last];
	for(int i = last - 1 ; i > 0 ; --i){
		int mn = st - x;
		if(mn>a[i]) return false;
		if(mn>a[i-1]) st = mn;
		else st = a[i-1] + 1;
	}
	st -= x;
	ll i;
	if(st<=0){
		st = n - st - 1;
		i = m - 1;
	}else{
		st = n - (x-(st-1)) + 1;
		if(st>a[m-1]) return false;
		else{
			i = m - 2;
			st = max(st,a[m-2]+1);
		}
	}
	for(; i > last ; --i){
		int mn = st - x;
		if(mn>a[i]) return false;
		if(mn>a[i-1]) st = mn;
		else st = a[i-1] + 1;
	}
	if(st<=en) return true;
	return false;
}
*/

bool check(ll x){
	ll mn = n - a[m-1] + a[0] - 1, rem = 0, np = a[0], cnt = 0;
	for(int i = 0 ; i < m - 1 ; ++i){
		ll t = x - rem;
		if(t<=0) return false;
		if(a[i+1]-a[i]<=t){
			ll d = min(mn,t-a[i+1]+a[i]);
			cnt += d;
			rem = 0;
			np = a[i+1];
			mn = mn - d;
			mn = min(mn,np-a[i]-1);
		}else{
			np = a[i] + t;
			rem = a[i+1] - np;
			mn = min(mn,np-a[i]-1);
		}
	}
	ll t = x - rem;
	if(t>=n-a[m-1]+a[0]) return true;
	rem = n - a[m-1] + a[0] - t;
	return cnt>=rem;
}

int main(){
	read(n);
	read(m);
	ll l = 1, r = 1;
	for(int i = 0 ; i < m ; ++i){
		read(a[i]);
		if(i>1) r = max(r,a[i]-a[i-2]-1);
	}
	if(m==1){
		printf("%lld\n",n);
		return 0;
	}
	
	r = max(r,n-a[m-2]+a[0]-1);
	r = max(r,n-a[m-1]+a[1]-1);
	
	// printf("%d\n",check(2));
	while(l<r){
		ll mid = l + r >> 1;
		if(check(mid)) r = mid;
		else l = mid + 1;
	}
	
	printf("%lld\n",l);
	return 0;
}