/*
https://codeforces.com/contest/1417/problem/E
E. XOR Inverse
time limit per test2 seconds
memory limit per test512 megabytes
inputstandard input
outputstandard output
You are given an array a consisting of n non-negative integers. You have to choose a non-negative integer x and form a new array b of size n according to the following rule: for all i from 1 to n, bi=ai⊕x (⊕ denotes the operation bitwise XOR).

An inversion in the b array is a pair of integers i and j such that 1≤i<j≤n and bi>bj.

You should choose x in such a way that the number of inversions in b is minimized. If there are several options for x — output the smallest one.

Input
First line contains a single integer n (1≤n≤3⋅105) — the number of elements in a.

Second line contains n space-separated integers a1, a2, ..., an (0≤ai≤109), where ai is the i-th element of a.

Output
Output two integers: the minimum possible number of inversions in b, and the minimum possible value of x, which achieves those number of inversions.
题意
有数组a，现要用数组a形成数组b，规则如下：
1.选择一个非负整数x
2.b[i]=a[i]^x;
现找出x令数组b的逆序对最少
输出最小逆序对数和x
*/

#include <iostream>
#include <cstdio>
#include <vector>
#define re register
#define pb push_back
#define MAXN 6000005

using namespace std;
typedef long long ll;

inline int read(){
	int x = 0, f = 1;
	char ch = getchar();
	while(ch<'0'||ch>'9'){
		if(ch=='-')
			f = -1;
		ch = getchar();
	}
	while(ch>='0'&&ch<='9'){
		x=(x<<1)+(x<<3)+(ch^48);
		ch = getchar();
	}
	return x*f;
}

int n, arr[MAXN], tot, trie[MAXN][2];
ll DP[MAXN][2], x, inv;
vector<int> G[MAXN];

inline void add(int x, int idx){
    int u = 0;
    for(re int i = 29 ; i >= 0 ; --i){
        int bit = !!((1ll<<i)&x);
        if(!trie[u][bit]) trie[u][bit] = ++tot;
        u = trie[u][bit];
        G[u].pb(idx);
    }
}

inline void DFS(int u, int dep){
    if(trie[u][0]) DFS(trie[u][0],dep-1);
    if(trie[u][1]) DFS(trie[u][1],dep-1);
    if(!trie[u][0]||!trie[u][1]) return ;
    ll sum = 0;
    int t = 0;
    for(re int i = 0 ; i < G[trie[u][0]].size() ; ++i){
        while(t<G[trie[u][1]].size()&&G[trie[u][1]][t]<G[trie[u][0]][i]) t++;
        sum += t;
    }
    DP[dep][0] += sum;
    DP[dep][1] += (ll)G[trie[u][0]].size()*G[trie[u][1]].size()-sum;
}

void solve(){
    n = read();
    for(re int i = 1 ; i <= n ; ++i)
        add(read(),i);
    DFS(0,29);
    for(re int i = 29 ; i >= 0 ; --i){
        inv += min(DP[i][0],DP[i][1]);
        if(DP[i][1]<DP[i][0]) x += 1ll<<i;
    }
    printf("%lld %lld\n",inv,x);
}

int main(){
    int t = 1;
    //t = read();
    while(t--){
        solve();
    }
    return 0;
}
