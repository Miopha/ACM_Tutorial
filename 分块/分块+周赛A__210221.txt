/*
https://vjudge.net/contest/423782#problem/A
Dima's spent much time thinking what present to give to Inna and gave her an empty sequence w. Now they want to fill sequence w with numbers zero and one. For that, they decided to play an amusing game.

Before the game begins, Dima chooses m integers a1, a2, ..., am (1 ≤ a1 < a2 < ... < am). Then Inna and Dima start playing, that is, adding numbers to sequence w. Each new number they choose is added to the end of the sequence. At some moments of time Dima feels that the game is going to end too soon (and he wants to play with Inna as long as possible), so he hits a table hard with his fist. At that the a1-th, a2-th, a3-th, ..., ak-th numbers from the beginning simultaneously fall out of the sequence (the sequence gets k numbers less). Here k is such maximum number that value ak doesn't exceed the current length of the sequence. If number a1 is larger than the current length of w, then nothing falls out of the sequence.

You are given the chronological sequence of events in the game. Each event is either adding a number to the end of sequence w or Dima's hit on the table. Calculate the sequence w after all these events happen.

Input
The first line of the input contains two integers n and m (1 ≤ n, m ≤ 106) showing how many events took place and how many numbers Dima chose.

The next line contains m distinct integers ai (1 ≤ ai ≤ 106) sorted in the increasing order.

Next n lines describe the events in the chronological order. Each line contains a single integer: -1, 0 or 1. Number -1 means that Dima hits the table. Number 0 means that Inna and Dima add number 0 to the end of the sequence. Number 1 means that Inna and Dima add number 1 to the end of the sequence.

Output
In a single line print a sequence of numbers 0 and 1 — the elements of the sequence after all events happen. Print the elements of the sequence in the order from the beginning to the end of the sequence.

If after all events the sequence ends up empty, print "Poor stack!".
*/

/*
 * 朴素的模拟避免不了移动序列或修改位置，O(n*m)会TLE
 * 可以用分块来优化，每个点记录当前位置是否有数字，从而快速查找要删除的数
 */
 
#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
#include <cstring>
#include <algorithm>
#include <cmath>
#define pb push_back
#define cl clear
#define mp make_pair

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> P;
const int INF = 1e9;
const int MAXN = 1000005;

inline int read(){
	int x = 0, f = 1;
	char ch = getchar();
	while(ch<'0'||ch>'9'){
		if(ch=='-')
			f = -1;
		ch = getchar();
	}
	while(ch>='0'&&ch<='9'){
		x=(x<<1)+(x<<3)+(ch^48);
		ch = getchar();
	}
	return x*f;
}

int n, m, a[MAXN], len, block, L[MAXN], R[MAXN], belong[MAXN], seq[MAXN], len1, sum[MAXN];
bool vis[MAXN];

void build(){
	len = sqrt(n);
	block = n / len;
	if(n%len) ++block;
	for(int i = 1 ; i <= block ; ++i){
		L[i] = (i-1)*len+1;
		R[i] = i * len;
	}
	R[block] = n;
	for(int i =  1 ; i <= block ; ++i)
		for(int j = L[i] ; j <= R[i] ; ++j)
			belong[j] = i;
}

void add(int pos, int val){
	sum[belong[pos]] += val;
}

// delete the element of pos
void del(int pos, int r){
	int s = 0, e = 0;
	while(e<=block){
		s += sum[e];
		if(s>=pos){
			s -= sum[e];
			break;
		}
		++e;
	}
	--sum[e];
	for(int i = L[e] ; i <= R[e] ; ++i){
		if(vis[i]) ++s;
		if(s==pos){
			vis[i] = false;
			break;
		}
	}
}

int main(){
	n = read();
	m = read();
	for(int i = 1 ; i <= m ; ++i) a[i] = read();
	build();
    for(int i = 1, op ; i <= n ; ++i){
		op = read();
		if(op>=0){
			seq[i] = op;
			vis[i] = true;
			++len1;
			add(i,1);
		}else{
			int p = lower_bound(a+1,a+1+m,len1) - a;
			if(!p||len1<a[1]) continue;
			if(a[p]^len1) --p;
			while(p){
				del(a[p--],i);
				--len1;
			}			
		}
	}
	if(!len1) puts("Poor stack!");
	else{
		for(int i = 1 ; i <= n ; ++i){
			if(vis[i]) printf("%d",seq[i]);
		}
	}
	return 0;
}